SPEAKER 0
What we're doing now is applying chubby chefs. We're not computing. Yes. So the different.

SPEAKER 1
Styles, it's the variance. And then using the variance.

SPEAKER 0
If I compute the variance say this is finite. So it's interval so holds. Yeah okay. Perfect. All right. Thank you. Yeah yeah.

SPEAKER 2
Yeah.

SPEAKER 3
Showing something as. Showing that is, showing that it has a probability.

SPEAKER 4
Uh.

SPEAKER 1
Addicted. Some of them. What does it look like?

SPEAKER 5
We have the same view.

SPEAKER 1
So you can't predict it when it's not random.

UNKNOWN
He said. It means that.

SPEAKER 1
The. It's constant for anything but absolute.

SPEAKER 6
Okay, so I guess I'll make a start. I'll not wait for the remaining 93% of the class to turn up. So this is kind of a finale you decide kind of session. Although we've only had one response, so I guess it's one person decides this is going to be very much a one person's session today. We'll use the Q&A and we'll try and sort of adapt as we go along. So this session is kind of forcing me to be quite agile with the way I deliver stuff. But let's just start with just a recap of where we are up to putting all this stuff. We're now at this kind of final session here. It's called revision there, but it shouldn't be. It's kind of the recap really. We're going to have a revision session in, I guess, April or May. So you'll get the opportunity to have a revision session where we go through exam questions and and think more about that side of things. So this slide is kind of my way of navigating between the different things I wanted to talk about today. So I'll kind of dip in and out of those as we as we go along. So the main things I wanted to do today from my personal agenda was to go through the stuff that I kind of glossed over during the main lectures. So there's quite a bit of a quite a few times when I had to sort of speed up a bit towards the end and missed out on something quite important. So I'm going to go through a few of those. So there's a bit of lecture content to start with. Then we'll sort of have a quiz just to recap and make sure you kind of reminded of all some of some of the challenging areas where where we've got things a bit muddled up in the past. So I've kind of focussed that on the questions that we got wrong before. So hopefully that's useful. I get a bit of time to do at the end of the term module feedback survey, because I was hoping that would have happened in the seminar on Thursday, but the tutors didn't manage to understand my instruction, so we'll spend five minutes doing that. Hopefully there's enough time to do that. There was the one Q&A question. By the time we get to that section, maybe there'll be a few more. So there'll be more opportunity for answering your specific questions. So do feel free to get into vbox and do that. And I've also got a few miscellaneous things that that might come up. Let's find out. So we'll start off with the with the skipped content then. So first of all, in lecture three I talked about CPM. But when I got to the bit about crashing, I started crashing the lecture and sped up and gloss through some of that stuff. And I thought it was worth doing a proper job of the time management material. So what's crashing? Crashing, as you probably recall, is this way of compressing a schedule. It's a way of reducing certain tasks to make the whole project finish faster. So obviously it only makes sense to crash the critical path. So there was a graph that I didn't really talk about. I just told you you could look at it in your own time. So this graph is showing the time of the duration of the project and the cost. At a certain point, when you've done your critical path method or whatever, you'll be at this point here where there's a certain budget to the project that you're expecting in a certain amount of time. So this is 30 weeks and Â£60,000 is the is the is what you get when you do your critical path method. Right. So that's the starting point for this analysis. And you decide okay. Well listen that's not quick enough. We want the project faster. But inevitably if you want to make the project faster, you're going to have to increase the amount you pay, right. You're going to have to deal with the iron triangle and realise that time and money can be traded off. You can double the number of people in your team, or you can, you know, buy an external solution which is more expensive than the slow in-house version you were thinking of. But at this point here, you can also imagine you could also try and slow down if you wanted to. I don't know why you would want to, especially because if you did try and do the take longer, it would actually increase your costs. Can anyone venture a guess as to why taking longer would increase your costs, rather than reduce them further? Yeah. Yeah it does. Yeah. Because there was the answer. There was time costs money. So you know, running the business day to day, there are going to be some fixed costs that are going to keep incurring costs every day. Your broadband bill isn't going to go on pause while you pause your project. So all of those ongoing fixed costs are going to continue. So taking longer it will also cost you more. Now, of course, in theory, there may be ways to reduce the number of people on the team and get the number down lower. So I think maybe that's not completely accurate, but that's the kind of that's what's being exemplified in the diagram there. That's why the graph goes up okay. So we start from that point A and then we can envisage crashing the most the most feasible task, the one which is going to give us the greatest reduction in time for the for the money spent. So that's managed to increase the cost to 80,000 but reduce the project duration from 30 to 20 weeks. So I explained there that you're crashing by picking the task, which is the the lowest hanging fruit, the easiest one to crash. So therefore the incremental cost is going to be the smallest for the first crash, you do the next crash you do. The incremental cost is going to be much, much higher because it's going to be that's going to be by choice, the harder task to crash. So this is kind of you've got this kind of you get this kind of curve. You kind of work out all the different tasks. You could crash, work out the cost of crashing them, and you plot them on the curve like this and try and figure out what the best decision would be. You obviously crash the easiest tasks first. There comes a point where you get to this kind of point of no return. You can't crash anymore. You're now at a point where crashing any further wouldn't make any sense. That's the crash limit. There'd be no more gains possible by that beyond that point. So that's when it would just be. It would cost you infinite amount of money and you'd achieve zero weeks of crash, so there'd be no point doing any further. So you probably most projects are going to get crashed in this zone here where it's cost effective to crash. You don't usually reduce the time at any cost. You've got to make that trade off. That's the iron triangle in action. So hopefully that now explains the diagram. I think that's that's all on that one. If there are any questions about this, do feel free to raise them in the chat or put up your hand if you aren't sure about that. Something else I glossed over in that same session was the difference between free and total float. This is something that you presumably now have a good understanding of from the seminar work. Remember that float time is this is this concept of slack, where a task in a critical path analysis result will, may or may not have some slack. You can delay that task and potentially not affect the end of the project. So obviously this float time only applies to things off the critical path. The critical path is really defined by things that don't have any slack. So anything off the critical path has some float time. There were two kinds of float time. There was free float and total float. The free float being the ability to move a task without affecting any task at all. So there are no successes that depend on it. And total float being the ability to delay a task without delaying the end of the project. So necessarily, and again, I won't prove it now, but necessarily the free float is always less than the total float. And that's something that you should be able to reason about. So it's worth thinking about that. There's a past exam question which should test you on that as well. And then there was this example which I couldn't understand at the time, but I've now figured it out. It's making a chicken sandwich is what's happening here. There are, as you can see, some two, two key phases. This there's the there's a chicken. The chicken making you get to pre-heat that rotisserie oven which takes quite a while. Then you can roast your chicken. That's clearly the critical path. That takes a lot of time. Whereas mixing the ingredients for the bread and preheat the bread oven, that can happen in parallel, followed by finally the baking of the bread. And that's all done. The breaking of the bread can be finished within 60 minutes, whereas the chicken roasting takes 90 minutes. Very, very slow roasted chicken maximum succulents pretty important. So hopefully this is this is a task that you relate to as students. You probably regularly roast your own chickens for your chicken sandwiches. But whether or not this example relates, you relate to it. The thing we're talking about here is float time, right? So the critical tasks, as we've already said, don't have any float. They have no total float. That's that that's what this little box here is. And necessarily then they also have no free float. You can't delay any of these tasks without affecting both the immediate successor and the end of the project. These these three tasks here are all noncritical. So looking at baking of the bread, it's a non-critical task. Therefore it has some float. It has some total float. And in this case it's got 30 minutes because you remember it can finish as early as 60 minutes but the chicken's taken 90. So we've got 30 minutes of slack. We can delay baking of the bread. It's worth noting that you can think of the finish node as a task in its own right. It's sort of a zero duration task. For the purposes of reasoning about float time. So baking the bread, you might think, well, there's no successor, therefore it can't have any free float. But obviously you can. It can have free float. It can have free float up until the project finished time. So that's that's something to think about, something that people aren't always clear on based on the sort of the way the terms are defined on my previous slide. So that's, that's worth making clear that you could you should be able to in exam situation derive that those two floats there are 30 minutes. They're equal. Then task this this task here this preheating of the bread oven that's more critical than the mixing of the ingredients, because it takes 20 minutes to preheat the oven and only ten minutes to mix the ingredients. So what that means is the breaking of the bread is probably going to be limited by the preheating of the bread oven. The mixing of the ingredients is the one with with the slack, right? So delaying the preheating of the bread oven is going to affect the baking of the bread. There's no way of getting around that. So that's why it has no free float. So it has these all have a substantial amount of total float because of the critical path being much longer. But in terms of free float, this will have zero minutes of free float because it would affect baking of bread. The obvious and similarly mixed ingredients. You've got that ten minutes of slack there because of the preheating of the bread often, so you only get this free float concept appearing when you get past sort of combining joining into a successor. So if two tasks have a common successor, that's when you start to see free float in one or the other of those paths. Does that make sense as well? It's kind of like almost critical paths of the critical path, which is kind of the next critical path, I suppose you could think of it as it's an intuitive way of thinking about it. So yeah, I hope that's not so obvious. Maybe it was already obvious to you from the seminar work anyway, so let's just check if that's true. So here's an example three tasks A, B, and C. The critical path is the C path. It's a duration for one whereas this is a duration one. This is a duration two. So which task ABC has free float first of all.

UNKNOWN
Show of hands. Yeah.

SPEAKER 6
B why does B have free float? Yeah. Yep, exactly. It has to be at the point where these two paths sort of combined into one. So it had to be if you delayed A, then that would obviously impact B, right? Because they are on a path together. So only B had the B was the only candidate there. And it's it's free float. There is a unit of one. Which task has drag. Yep C yep. Absolutely. What is its drag. Just one way. Absolutely. Yes, exactly. If you drag sea by more than one, then C would no longer be the critical path a B would be the critical path. You're absolutely right. Good. Excellent. So that's that's that first bit of skip content done. And it seems like you already knew that stuff already which is good. In the same session I also rushed over the pert normal distribution stuff. So I wanted to just make sure you understand how normal distributions work. I'll do a quick, very quick run through of Pert again. Just to remind you, Pert is this idea that you're going to do critical path method with a three point estimate rather than a single point estimate. So there are these distributions we can use in an exam situation. They would be given to you. So you don't need to memorise these at all. You just need to be aware that there will be a mean in a variance formula that you need to think of in that situation, and you perhaps need to reason as to why you would choose one formula or another. So perhaps it's worth thinking about what the advantages of different distributions might be. I should tell you that the beta distribution is very convenient in terms of mathematical convenience. It's not necessarily more representative of reality. The triangle distribution is very convenient in terms of calculating it because it's nice and geometrical, but the beta distribution has a nice simple formulae which use these for their mathematical convenience, not their mathematical accuracy. You could of course consider using a distribution that represented the reality of distributions of things. But and I think the big decision probably is, is maybe closer to reality than try and get a distribution. Things don't tend to form these nice sharp peaks with kind of points of inflection which are non differentiable. But you know that's statistics. You don't need to worry about that. But you need to perhaps consider arguments for and against different distributions and why you might choose them, not going into the details of the stats. So to do Pert we just do CPM. To start with, we start with our project network diagram, which we get from our dependency graph. And we use the the mean column. We ignore the the other two points from the beta distribution or the triangle distribution. So we don't include the optimistic and pessimistic estimates, just the realistic one, the one we expect it would take when we do our critical path method. So we just do critical path as as normal, nothing special. And then we can start applying those values. So let me fast forward this. So yes to calculate the expected duration of the entire project, we sum up the means on the critical path. And to calculate the variance we sum up the variances on the critical path. We're not doing anything clever really. It was just adding up numbers. So in doing this we're assuming a normal distribution. And therefore the final project duration will be have. We'll have a mean in standard deviation based on those expectations we just calculated. So in the example I've just shown you there the mean was 15 days and the standard deviation was 2.7. So we would represent that as a normal distribution looking something like this. And there are various online calculators to produce these kind of diagrams in an exam. Obviously you wouldn't have access to that, but you should obviously be aware of certain obvious properties about normal distributions. So maybe let me talk a little bit aside about what normal distributions are. The probability is given by the area under the curve. So in this example here let's start with this example. In this example here this is called a standard normal distribution. It's got a mean of zero and a standard deviation of one. The area under the normal distribution between minus infinity and zero is always half right. Because it's symmetrical. And there are standard probability tables that tell you what the area is between here and here and between here and here, etcetera, which we'll talk about in a second to get from the standard normal distribution to a regular normal distribution. Let's say your project had a mean of seven and a standard deviation of three. How would you reason in terms of these numbers when dealing with this kind of thing? You would need to stretch it by multiplying it by the standard deviation. So in this case and then translate it by whatever the mean is. But you can see it's exactly the same shape. So if someone said in this case what's the probability that the project will be finished. What's the what's the area under the curve left of zero. Then you'd be able to say it's 0.5. Similarly, what's the area under the curve left of seven when the mean seven then it's also a 0.5. It's hopefully obvious. So you should have this concept of mapping between these two things in your mind so that you can reason about calculations regarding your project. So I realise I kind of rushed through that, but I'm hoping you already know this stuff anyway. But let's let's just make sure of that. So what's the probability that the project does not? Take longer than estimated. So we've estimated the project will take em. And I've sort of standardised that that plot from before by saying M is here and this point is M plus S the mean plus standard deviation and plus two s is there and so on. Right. So what's the probability that the project does not take any longer than M. Or another way of phrasing that. What's the probability the project won't be late? Okay. Get your answers in there. I'm hoping to get a ten out of ten here from everyone. Let's see. Okay, so it looks to me like everybody, all of you have said 50%, which would be the right answer. Apologies that it doesn't plot it exactly, exactly where it should do there, but yes, everyone I'm assuming is said 50%. If anyone said 49 or 47, then you're wrong, but close enough for the purposes of their this slide. Good. Okay. Oh, there we go. That tells me that 100% of you answered it correctly. That's what I wanted to see. Okay. Now I'm asking a different question. What's the probability the project is no more than one standard deviation late. So to answer this question, you need. Unless you've memorised probability distribution functions, you need a lookup table. Now this is the project here right. In terms of M's and S's it's not there are no numbers there. But usually you'll get a data table which will tell you. So in the exam you get a formula book or something which will tell you which will give you a data table of the standard for the standard normal distribution. You would have had the same data table in your GCSE exams and and every other exam you've probably ever sat, but you never looked at it. So the way it looks is something like this. It's a table of Z's and probabilities. So the text above the box actually I think is the best thing to read to you. So the probability table for the standard normal distribution with a mean zero and variance one p gives the probability that the normal distributed random variable x is between zero and z. Okay, so that's not exactly what you're looking for. But from that you should be able to work out the answer to this question. So I want to let that sink in a little bit because I don't I don't explain this too much to you because in an exam situation, you obviously have to generalise beyond this particular example, but you've got all the information you need to answer this question now on this slide. So what is the probability that the project is no more than one standard deviation late. I can give you a little clue. What's the area of the graph in pink plus the area in blue. That's what you need to work out. So I'll start the poll. Hopefully you can figure this one out.

UNKNOWN
Okay, get in there.

SPEAKER 6
Give you a few more seconds to post your answer. Anyone else? Yeah, they've got extra person this time. That's good. Okay. So interesting. We've got a variety of answers there and the majority seems to have got this one right, which is good news. So I can say that the correct answer is 84%. And 44% of you who have any of that is got that right. That's interesting. That's entirely with the 56%, is it? Yeah, maybe somebody put some decimal points in there or something or rounded differently. So you already knew that the area of the pink area was 0.5. That's what we figured out in the previous question. And this z table, this lookup table here will be able to tell us this bit this bit in blue right. It'll be able to tell us the probability between one up to one standard deviation. So remembering that these these curves are very generalisable. It's the question is asking us to find this value here. Right. So Z being one. You see what the probability that a variable is between 0 and 1 standard deviation is 0.34. So it's 0.5 plus 0.34 which is 84%. Does anyone who didn't answer that question from the back? That's not. That is just some number. Yeah. It would be number of standard deviation. So the standard deviation is one. Um, so yeah. In that. Yes, absolutely. Is that clear? So I think it's this text. Right. So P is the probability that a random variable is between zero and z. So z can be anything you want it to be if you want to. So yeah it would be the number of standard deviations because it's it's a standard normal distribution that we're dealing with. So in this case, if you wanted to know the probability that it was between plus half a standard deviation up to that point there, you would need 0.5 here. These tables don't stop at one. They can go up to two three, four, five. They they go on forever. You actually often have a grid of many, many different values to look up from. But yes, in this case it goes as far as one standard deviation. And you can see these numbers here sort of follow a bell curve as well as they go up towards that point. Okay. So in summary then Pert is like CPM but adds uncertainty using probability distributions, allowing it to make statistical inferences. But those are assumptions. It's making an assumption of normality of normal distributions which may not be a reliable thing to do. It may not be realistic. By using numbers, it gives us a false sense of precision. It can give us the sense that what we're doing is correct, even if it's just fudge the numbers and made up guests. Guess is guesstimates. It can kind of be misleading. So you've got to be careful when you're using numerical methods like this, but you should also be wary about trying to be too precise with some of these things, because, you know, any of these models are only as good as the data you put into them. If you're putting rubbish estimates in, what's the point of doing an accurate model of the distributions of things? So yeah, be aware of the risks and the dangers of using these more impressive numerical techniques, although they are quite fun and I think it's quite nice to have those extra the extra uncertainty as a measure. Okay. So that's scope and time management now. Done. I'll now move on to print two stuff, but let me just check if there's anything on the Q&A first. Okay. Can we self-serve the essay? Yes. You may self-serve the SA. How does self cert work with Moodle submission? You self cert on tabular that notifies me that you self cert it. And then on Moodle you will have to submit in a separate round of submissions. So there'll be a initial round of submissions that everyone needs to submit by. If they haven't self ID or got mitigating circumstances of some sort. There'll be a new Moodle workshop that only those people with late submission will submit to, and for them they'll have to wait till everybody with an extension and mitigating circumstances completed their submission before there'll be a new round of peer assessment opening just for that group. So it's kind of like two different cohorts of marking. Does that make sense? So yeah you self just like before and it should be rather self explanatory when you finally get round to submitting on Moodle. Good. Okay. Back to the slides. Okay, so this is kind of a bonus bonus thing because somebody asked this last year and I thought I'd keep it in. What's the difference in PMBoK and Prince two? We already had this slide a while back describing what the differences were. So Prince two is a strict methodology. It tells you the different steps and stages you need to follow in order to deliver a project in a controlled way. Whereas the PMBoK approach, the PMI approach is a framework. It presents a whole range of different industry standard techniques, best practices, things you should do in every project. But you can dip into that and choose whichever ones you like. It doesn't prescribe that you need to do these things, it just gives you the the option to do them. Prince. Duke is very much more focussed on business case and therefore, I think adds those constraints of the steps that you need to follow because of those for those reasons, whereas PMI is probably more generalisable to many different types of projects, perhaps more focussed on the customer rather than on the business. They're both structured in terms of processes, in terms of knowledge areas, in terms of steps. So they're both kind of similar, not exactly the same, but but there are a lot of similarities. And at the time I think I presented this animation which I thought was pretty cool. So I'll show you it again in Prince two. Then on that side there are two different steps of initiation. That's the starting of and initiating which sort of different levels of planning. And then we've got this loop. But actually this is probably identical. In both cases. It was just badly written in the PMI version. But the idea that you have planning and execution in an iterative manner, with constant monitoring and controlling to make sure things are going to plan. But of course, you mustn't forget the big brown turd, which is the bit that pops up on the side. Hang on, let me get there. I'm jumping the gun a bit here. The bit that makes Prince two significantly different is the fact that you have to go through these gates of approval from a board of directors. So that's where Prince do really differentiate itself. Otherwise they're quite similar. So I've added a few extra bits here to sort of highlight the reasons for those differences. So the mandate of Prince to the motivation is a business case, which is to some extent external to the project. Whereas the mandate in PMI is not even not even part of it. Right. So the business case is a constant part of Prince to and the project manager is involved in that. But in PMI there's really no reference to where the project idea came from, which is potentially dangerous because the project manager really should have some some say on the way the project is shaped. I think in terms of risk, both have different ways of managing risk, but they're kind of quite overlapping. So there's a risk theme in Prince to focusing on risks to the business primarily. And there's a risk knowledge area in PMI. But it's a very similar process that you identify the risks and you come up with a plan and then you mitigate that, mitigate things. In terms of PMI, the prince, the project manager, is in charge in theory, although, you know, they didn't decide to do the project, but they are in charge of things once the project is begun. Whereas in Prince two there's a board and the board is accountable and they delegate to different levels of superiority with the project manager next in line. PMI is very descriptive, whereas Prince two is very prescriptive. In terms of detail, Prince is very detailed, very specific. Whereas the PMI approach has a lot of extensive detail, including hard and soft skills. It doesn't tell you how to do your job, but it certainly gives you a lot of tools to do your job in whatever way you see fit. Prince two is therefore very simplified. It doesn't give that same range of options for the project manager. They don't have to make the same number of decisions in Prince two, whereas if you were a PMI practitioner, you need to follow complex procedures to figure out what you want to do. It's not simple. You've got to do some thinking for yourself. And in Prince two, of course, there's a lot more documentation in PMI. It's up to you that you're in charge. So I think you have a lot more power and flexibility as a project manager. If you're following the PMI approach, if you're a guide user but you don't have the same. You know, a set of set of guidelines and instructions that can be quite useful if you're managing a project in an institute kind of way. You know, there's a lot of overlap, right? A lot of the things that you do in Prince to are just straight from the book guide. They've just been structured in a specific way. So that was a bit of bonus, a bit of boring bonus material, just to just you didn't ask me enough questions beforehand. So that's just filler. And then the final, the final bit of content that I wanted to go through, which I didn't get time to do last time, was scaling agile. So how do you scale agile? So agile is is great. It's powerful. As our guest lectures have told us, it's incredibly flexible. It is empowering of teams. It creates a sense of camaraderie and trust. Agile projects tend to tend to seem and feel really fun to be part of. Being in a software team where the team is respected and has those kind of communication links between each other is really nice, but you don't get that for free. And it doesn't work for all projects. It works very well for small projects, but as projects get bigger and more complicated, that becomes a need to scale agile. We had a guest lecturer a few weeks ago, it last week, maybe last week, who talked about the need for governance and control. And they kind of picked and choose which agile techniques they used and which waterfall ideas they used. And as soon as you start to do that, you kind of pollute what agile really is. It's no longer agile, really, if you start to do that, because as soon as you start adding these rules, this governance, you lose the ability of the developers to shape the way the project goes. You start to force the developers to pick a certain way. If you say you've got to have it finished by three weeks time, and here are your requirements. Even if you've got a few sprints to do it in, you're still aiming for that waterfall set of requirements, right? So it isn't agile really. It's kind of pseudo agile. One of our guest lecturers, lecturers warned us about cargo cult agile, which I think is something that naturally arises when you do start to add governance into agile. You can't just stick agile within Prince two and expect it just to work magically. You need to change. Agile needs to not only be part of to scale agile up, it needs to be not only part of a governance framework, but it also needs to change the way the framework is governed in the first place. The people on the board of directors would need to be agile thinkers. They need to be operating in an agile way. They need to be embracing of change. So I think our guest lecturer last week decided she wouldn't allow for flexible change management. She used the prince to change management idea for the project that she gave the example of, which kind of to me defeats the point. And she mentioned something called an agile ometer, which is quite interesting. And the idea there is that you need to tailor the amount of agility in a project to the environment in which the project is being handled. So if the board aren't agile and aren't embracing of change, then your project isn't really very agile and the amount of agile ness you can achieve is really what you want to try and maximise for the success of the project. I think if you if you're trying to do a governed agile methodology. So we'll talk about some of those things. I think in an exam situation, if we're talking about agile and we're talking about different techniques and technologies to do it, it often comes back to the Agile Manifesto. You need to think about how the Agile Manifesto. Prioritises different things. And if you are defining a new methodology, perhaps one that has more governance, is that truly agile by the Agile Manifesto and the chances are you probably doing some of them and not others. You're favouring some and not others in order to achieve your aims. So, for example, if you want to do have all of these things in a scalable way. But you perhaps don't have the ability to to manage a project of that scale, then you might decide, well, let's add lots of processes and tools to help achieve these things. And that might be one approach. So you're you're losing some of the agility in order to get things to work. Let me give you some examples. So we talked already about some of these things in the lecture. But for example rapid application development. This is the idea that you are trying to rapidly produce prototypes so that you're delivering value quickly. So this is agile because it's not only agile, it's agile. And it favours this idea of responding to change. It wants to deliver prototypes quickly so that you can get feedback from the user. So you can make changes that that are going to really deliver further benefits to the user in future iterations. So by focusing on this, you're really focusing on the customer and their need for change. And it's moving against the plan. There's going to be a lot of deviation from a plan if you take this approach. So by using that agile methodology you're you're picking one of the Agile Manifesto principles and really emphasising it. Similarly, test driven development, the idea that you're focusing on quality now you want quality. So you're focusing on tests that you're working. Software becomes your primary measure of success, as opposed to comprehensive documentation of or any of the other agile manifesto points. So you're kind of you're kind of picking and choosing which of the Agile Manifesto things to to focus on when you choose these different ideas. Similarly, feature driven development features are kind of more customer facing things. So you're now focusing on customer collaboration as your main priority, right? So these are all agile technologies because they don't negate any of the other requirements of the manifesto, but they also add real emphasis to one of the categories. Now last time I also talk about extreme programming and extreme programming is the idea of doing all the best practices from all the agile, all the agile ideas. So you're going to have test driven development in there. You're going to have things like pay programming and really kind of intensive peer review and things like that. But what this actually is doing is it's achieving really a lot of interaction between people through things like peer programming, a lot of close collaboration, and it's really improving the quality of software. But it's introducing a lot of processes and a lot of tools. So it's it's starting to to lean away from some of the agile ideas. And, and I think that's probably why XP has only limited uptake. So for some people it's the best choice. But it's not the most agile approach. It doesn't achieve the maximum value for the customer in the way that some of the other techniques do. But you you might use this in a very risk averse situation, where you really want to make sure that quality is at the forefront. So it's kind of going a little bit beyond agile and it starts to break in terms of being agile, I think. There's a method called Crystal which recognises that agile goes a little bit too far in terms of processes and tools, so it tries to make XP more lightweight, and what it recognises is that smaller projects, less critical projects should be considered to be less safety critical and therefore don't need all of the XP practices, whereas larger projects, more risky projects, they do need more of those practices. So it's trying to put some balance back into the individuals interactions versus processes and tools direction. Okay, so for example, if it's a crystal clear project, this is like a smallish sized project. You have self-organising teams. They just get on with the job. There's not a lot of XP stuff to do as you move up in terms of that. So you grade each project based on how important it is or how risky risky it is. As the project gets bigger or more critical, you might start introducing code areas to to protect your code from certain errors. Start to introduce things like automated testing as you get bigger, having teams of specific skills so you can get specific features delivered more effectively, start to have stage releases rather than continuous releases. Then you might, as you move into more complicated things like this, have teams that are adaptive. But yeah, I don't I don't know what methods you would include. They're actually not listed on the slide. But you know, you start introducing more and more extreme programming and practices in order to guarantee that the project does deliver as expected. And you probably produce more governance. And it starts to become less agile in a different way. But you can imagine you could have some very agile projects at this end, and they probably get less agile as you start to deal with different risks. And so if you want to scale agile up, one of the common ways of thinking about doing this is just to do agile within a typical kind of waterfall workflow. So this method is called disciplined agile delivery. It looks incredibly complicated, so I'll try and break it down. To start off with you have an inception phase. Think of it as a project initiation and you have lots of short sprints in there. As you build up the backlog and figure out what the requirements are. So it's basically iterative requirements gathering, nothing particularly magical about that. Then you move into the construction stage where you have lots of small sprints producing the software. And these are sprints. You are picking things off the backlog. You are delivering the work. Ultimately, you get to a point where you're ready for release. So this is not quite the same as pure agile, where you're delivering working software to your customer. On each iteration you're delivering iterate. You're delivering it in iterations, in small cycles. But ultimately there is a sort of a shipping date for shipping. So when you have that sufficient functionality, you can then go into some kind of short sprints of transition and then production. So it's using it's using these time boxes. It's using some concepts from agile, but it's not agile anymore. It's lost some of that agility by doing this. So by adding that governance, it's creating more structure and providing more constraints on the project than a truly agile project. But the key things, I suppose, that make it feel more agile are the idea that it's iterative. There's feedback from the customer influencing the design. So there's some adaptability and they're self-organisation of the teams. And you can even insert whatever delivery method you want into that into that box. So dad, it's not not got a huge uptake, but I think it's quite an obvious way of trying to introduce agile into more governance things. Prince do agile, which was referred to last week, so I thought it was worth showing you a bit what that looks like. It's basically prints to these grey boxes. Here are all should all be familiar to you. Start up initiating stage boundary controlling stage boundary control. You know, stage design and the managing product delivery part of Prince to can be done however you decide it, right as a project manager. And if you're doing Prince do agile, it just suggests that you have releases within each. You can have several releases within a stage. Doesn't have to be one release per stage. You have several releases and within each release several sprints. So you're kind of splitting the project down into smaller chunks and delivering them in an iterative way. Was there a question at the back? Nope. Um, so it's quite similar to D&D in the sense that it's just adding iterations, adding time, boxing into what's already an established framework. So I think, I think to get this to work effectively, you have to go for prints to to work effectively. You've also got to introduce more collaboration and communication. The board need to be fully prepared for change. But that as our guest lecturer explained, that's not always possible. And quite often you pick and choose which elements of agile you're going to use for a given project. So there's flexibility there. Ideally, you've got a fully agile board who are fully on board for the ER. The fact that this release may, may or may not have the features you specified in your work breakdown structure at the start, or something like that. And then the most, I would say the most commonly used scaled method of delivering agile is this thing called safe scaled agile framework and has this diagram, which is incredibly complicated and really doesn't make any sense at first glance. But I'll try to I'll try to break it down for you. So you've kind of got two, two parts. So the bottom part is the agile delivery part. Okay. So these are your usual teams. And these teams do lots of stuff. So there's a bit of an XP element of it right. So they're doing scrum. They're doing Kanban. They're doing Kanban backlog management. They are doing pair programming if they want to. They're doing peer review. Lots of basically good agile practices. And I think you should really be picking and choosing which of these you think is appropriate. So you can just ignore all of this. This is just, you know, you pick an agile method. That's what you're going to work with. Then over here you split things up into sprints. So each of these lines here represents a different sprint. So things are kind of happening in time boxes like that. And each of these white yellow dots at the top is is a demo. So you're going to demo the software every two weeks maybe. And this is all on an architectural runway. You wonder why you need all this terminology. But this is this is the lingo of using safe. So there's an architectural runway where there are these sprints. It's basically so far this is no different from your usual scrum okay. Now at the top layer the business layer things get a slightly different. So you've got various customer centric concepts. So let me just. Oh yeah. So agile art stands for Agile Release Train which is basically in a project, you're going to have lots and lots of these agile teams in a large scale project, you're not just going to have one agile team working on the project, you're going to have many of these. And these teams of teams come together periodically. Could be up to 125 people. So many, many agile teams to figure out what the project, what to do next on the project. So that's kind of how the project is managed through this agile release train, this team of teams. So. What else to explain on this slide here. When I made this slide it made sense to me. But it's it's gone again. It's it's too complicated. The idea here is that you've got continuous delivery. So this picture here is the agile release train working to deliver a larger scale project. And there are three key concepts that it wants to do. So continuous exploration. You're trying new things. Continuous integration. You're constantly making sure that the pieces all fit together. And continuous deployment meaning that you've constantly got working software. So these are agile concepts. So in order to have this happening on the scale of the whole project. So each team of course can deliver their work each sprint. But that needs to be sort of unified across the whole organisation so that you're all working in some kind of global synchronicity, which is the challenging part. So I think really the key ingredient is having having a DevOps team, a team which are essentially writing software to do the business operations. Things like automated testing, integration and working across the different teams is how really you make this, this happen in reality. What else have we got? So we've already talked about the agile teams working in sprints. Each of those, a series of those sprints come together in a thing called what is it called, a planning interval API. So that's think of that like a Prince two stage. You have you basically break the project down into stages. And within each stage, each of the agile teams will be working in sprints to achieve a particular output from that stage. So this is kind of similar to, I guess, Prince to Agile in that you you are still managing by stage and you're just solving the problem like this. But I guess it's been being done in a distributed way with multiple different teams all working on different components at the same time. And then at the start and end of every so at the end, actually after each planning interval, there's going to be a retrospective where you figure out what went well in the last one and how can you improve your present things up to the, the whole group, the, the art, the agile release train, and you'll all work together on deciding the next steps for the next pie. So you're going to have like a day where there's a meeting of these hundred people all coming up with decisions. So that's kind of the way this works. So I hope I've explained that to some extent in an exam situation, I wouldn't be testing you on on all the intricate details of this. You wouldn't need to memorise this diagram or anything like that. But understanding the challenges of scaling agile is important in different ways that you might try to mitigate. That might be something to think about. Um, yeah. So I like this slide. So this is a bit like the agile ometer the idea that if you. So the key here is important right. So you act on feedback if there's like a feedback loop like this. So in a waterfall project you go through the project in phases and then you deliver a product that this box and perhaps act on that feedback. And then you might need to go right back to the start and do things all over again. So that's not that's the least agile you can be. If you're doing Prince two, you can actually deliver in iterations, right? And what that means. That's the stage delivery we talked about. You can. You can tell if you can produce a small piece of work, and I guess maybe there'd be some sort of feedback, but not from the customer. Some kind of internal, maybe directorial feedback before you move to the next stage. But again, ultimately no agility, right? This line is straight. The project has not changed from the original design very much. An iterative project would be one where you didn't have these phases of things like gathering requirements, designing. ET cetera. You just go straight into building working software. So iterative is perhaps increasing the agility because it's prioritising planning, but it's still not particularly agile. You're delivering a lump of software and getting customer feedback right at the end. So it's still not that agile. So iteration on its own is not the magic here, right? It's when you start introducing customer feedback in in the loop on the way that you start to get things. So if you have a system here where you involve the customer, at each step, you invite that feedback. Then you start to deviate from the plan, right. You start to see a few wiggles. You start to move in a direction that increases value to the customer rather than fitting to your original plan. But ultimately they don't get any working software in this version, they only get working software at the very end. So I think this is a bit like the way third year projects tend to be managed. You show your your supervisor something, you talk about what you've been working on, and they'll give you some feedback and you'll carry on working a bit more and you'll get a bit more feedback, but you won't ever necessarily show them a working piece of software or show your end user a piece of working software until very late in the project, probably probably week seven of term two during evaluation day. It's probably the first time the working software sees the light of day, which is a shame, because I think it's really important to to get feedback early in order that your project is going in the right direction. Otherwise what you deliver won't necessarily be the right thing. And then if you start to get into sort of real agile projects, you start delivering software as soon as possible and getting feedback, deliver software, get feedback, deliver software, get feedback. And this really is true agile. Finally for. Safe claims to be this level of agile. I think the idea that you are delivering working software regularly and getting that feedback. Prince to agile might also be considered in this category as well. But even more agile than that is to have continuous delivery weights, not even in time boxes. You're constantly delivering software and getting feedback from customers in real time and adapting in real time. And I think continuous delivery really only tends to happen in the maintenance phase of a project. So you deliver the working software, and then you might go into a continuous delivery where you start to adapt to customer feedback and improve the software in real time through a kind of support system. So there's these kind of different levels of agile, and there's an agile ometer, which I'm not going to talk about now, but you need to pick one of if you depending on the agile ometer for your organisation, you need to pick where you're going to sit on this curve. Which kind of method of delivery are you going to go for? Which I thought was quite interesting. In case it's not clear, the difference in iterative and incremental is here. If you if you go for iterative delivery, you're kind of you deliver something close to what you wanted perhaps, or what you thought you wanted at the start. And, and you start to improve it as time goes on with information, with incremental delivery. If you start painting and you do this, you clearly knew what you were going to build from the start, right? Incremental is not the same. You're delivering in small chunks that might be more manageable, but you need to have planned in advance. And of course, if you took a waterfall approach, you probably wouldn't get what you what you wanted unless that's what you wanted. Maybe you did. Okay, so that's the main talk component of today's session. Complete. So now we're all up to speed. So I really want you to sort of shape what we do next. We can jump into a quiz or we can do some Q&A. Or does anyone have any strong opinions about what we do right now? Were you feeling tired from your quiz? Wake up a bit. Yeah. Okay, let's do it. Let's go for a quiz then. If that suits you guys, let's see if you. You've been paying attention. Okay. So the link there. Warwick, UK pm Fox ten. Let's get some ten out of ten on here. The leaderboard is turned on so you can if you're feeling brave enough, you can even put your real name in there. If you feel like you're going to get ten out of ten. Okay. Question one then. So we already had this question. So you didn't do so well last time. So let's see if you can get it right this time. Which of the following is not one of the three initiating process outputs.

UNKNOWN
In the PMBoK approach? Okay.

SPEAKER 6
That person number ten. There we go. 11. That's good. 12. Excellent. Almost everyone. Okay. So interesting. You got it wrong again. The correct answer is the business case. Remember the PMI approach does not. Does not have the business case is an input in the the PMBoK approach okay. So this is about I suppose differentiating PMI and PMBoK. And let me go and check out my slides if there's anything I wanted to add to that. Yes. Okay. So yeah, in the business case in the mandate are the inputs to the initiating process. Okay. So not looking good so far. Maybe we'll go for a nine out of ten okay. In critical path methods. And that was that was week one. Now we're going to go to week two. So in critical path method what do we call the amount of time an activity can be delayed by without delaying the early start of any immediate successor. So this one should be easy. We just did this today. That's great. Some quick answers coming in there. Can we get 13? Yes we can. That's good. Okay. Excellent. Majority there. Got the correct answer. Free float. Slack times. The word slack is another word for float, but it's kind of more a generic term. If you refer to slack time, you're probably usually referring to the total float time. But the technical terms to use a free float and total float when we're dealing with this kind of stuff. Okay. Oh, another one from that week. So in Pert analysis, the project duration is normally distributed with an expectation of ten weeks. Various variants one week. What's the probability that the project will take ten weeks or less. Well this is this one's very easy. Since we did we really did do this question already today. Okay. I'll wait till everyone's got their answers in. Shouldn't take. Can we get 13? Got that? Brilliant. Yep. Well done. 14 if you got that right. Fantastic. Only 13 answered. I don't know how 14 got it right. Okay, now moving on to Prince two then. Which Prince two principle contradicts this criticism? The team are unable to work effectively when they are constantly being told how to do their job. This was a past paper question, this one. Okay, last few people. Get your votes in, please. Excellent. 14 again. That's good. There we go. In ten of you have got that correct. Managed by exception. Of course. The idea of managed by exception is that you only need to manage someone when things go outside of the normal range, right? If someone is, if something goes wrong, we deal with it if there's an exception. But otherwise let people get on with their jobs. Manage by stages is the idea that we're breaking things down into stages, phases, time, boxed chunks. So good. Well done. Another principle question then, when updating the project plan as part of managing a state boundary, what else might be updated? We've had this question before and I think many people got it wrong. It's a bit of a trick question. Okay, I get your answers in. Excellent. Oh, interesting. Interesting. Okay, okay. So the correct answer is the project initiation document. The project initiation document is a baseline document that you keep updating every single state boundary. It's a document that is a working document. The business case is probably going to be a part of that. The the exception plan might also be part of that. You know, you'll be updating all of your other plans as well. But the project initiation document contains all of that. So I suppose this is a bit of a trick question. You're probably going to be updating all of these things. Is there is the real answer okay. Now moving on to budgeting and forecasting. So hopefully this is something that you find nice and easy to understand these graphs. What is the status of this work package. Is this good news or not. Okay. I think you should really say, what is the status of this project? It's not really a work package, but a whole project. Okay, I'll stop the poll when it gets to 13 or 14. 15. Look at that. Some fast fingers today. Okay, I don't know the answer myself. Let me have a look. I'll just press the button and find out. Yep. You're right. Well done. It's under budget, but behind schedule. Yeah, I think the majority of you got that one. Some of you thought over budget. Why would you think that? You'd think over budget. So the earned value here is. So we spent here less than the value we earn. So we're under budget there. So that's right. Good. Okay. Halfway leaderboard. Let's have a look. Some very high scores on the board there. Well done Alia. Hopefully you can see your name on that board. All right let's see if you can. We can change that. So midway through the project you calculate the SPI of 0.5 due to a temporary. This is due to a temporary staffing issue. So you're not working in a schedule efficient way. Which easy formula should you use? So. So we're halfway through a project and we're going to forecast the remainder of the project. So which formula are we going to use to do that. So it's typical in an exam situation that I'll ask you a question about which formula to use. So you need to kind of need to be able to justify this in an exam situation rather than just picking one, of course. Let's see what you pick now. Oh, look at that. Right across the board. So the people who took the top one, they decided to disregard the scheduled performance and just focus on cost performance. The people who picked this one decided to ignore everything that's happened so far, and just keep the original estimates. These people are going to scale the project by both the cost and schedule performance. The CSI, this combined metric, and these people are going to use a formula that is incorrect. The bottom one isn't a real formula. So my suggestion is that you use the top one. The reason for that being that the cost performance index we don't really know anything about, but you can imagine that might continue as before. I think the second option is also valid, but you wouldn't want to use the Schedule performance index. So you wouldn't want to use this one because it was a temporary staffing issue that caused that spy. So predicting the rest of the project on that basis would perhaps be foolish. So I think I think one of these two you could probably make a good case for in the exam. I've suggested the top one, because we want to have a good measure of our cost performance for the remainder of the project, too. Okay. In scrum, you've got this question wrong last time, so let's see if you get it right this time. Who is responsible for measuring the project's performance? Okay, I'll stop the poll now. Okay, this is a bit of a tricky one because in scrum you don't really think of measuring performance. And I think it's a goes against the idea of scrum really that we that we're doing things like this. And for that reason someone like the Scrum master should it's their job to be a servant leader. They're supposed to be facilitating the team's progress. The project manager isn't really a person in scrum. That's not a role. So the answer is correctly the product owner. Bear in mind that this says the project's performance rather than the sprints performance. The Scrum Master might have some involvement in measuring performance within a particular sprint, but the overall project and the link between the project and the customer is the job of the product owner. That's what they do. That is the main role in Prince to all the other roles are quite kind of quite flexible. Different people could take on scrum master roles, for example, but the product owner is that key link between the project and the customer. Okay, good. Most of you got that right anyway. Now Kanban, how can you? Which of these is one possible way to spot problems in a Kanban flow? Okay. Where's number 13?

UNKNOWN
There we go.

SPEAKER 6
Oh, interesting. Interesting. So I suppose it would be true that increasing that monitoring individuals would be a way of spotting problems. It would not be very lean. Monitoring individuals is is kind of goes against the concept of lean. You're working as a team trying to solve a problem. You shouldn't be looking at individuals performance. So the correct thing to do is to reduce work in progress limits. The whole point of those work in progress limits was that it would enable you to support problems sooner, by minimising the amount of work that's going through the board. That's how you spot bottlenecks, because everybody spots that bottleneck because you can't pull until the until the downstream board is available for you to do so. So it's really important to limit that. That's the kind of thing we would. I was really hoping to get across to you in the seminar that as soon as you introduce those limits, it doesn't magically make you more efficient, it just makes it more visible. What's going wrong? So that's the whole point. So yes, reducing the working progress limits, increasing work in progress limits allows more work to potentially flow through the system, but it does not allow you to spot those bottlenecks. I suppose maybe you can get confused between what increasing a limit means. So it's probably worth making sure you're comfortable with the terminology. Reducing the limit reduces the number of things that can be worked on in progress. Okay, good. Right now moving to risk. As part of your project you have organised a conference. I think this is a bit of an ambiguous one I think. But let's see what we can do. You learn there's a 40% chance of a tropical storm. On the dating question how should you handle such a risk? That grid has nothing to do with it and all that. It's just just a nice illustration. Okay, so let's see what you think. Interesting, interesting. So 40% chance to me seems like quite a quite a substantial risk, right. That's almost like tossing a coin. I would say that would be considered very high risk. So if you're doing an pfma on this, you'd probably categorise it as a very high, high risk thing. Certainly high impact tropical storm. So it's something that I would imagine you would probably most organisations would probably want to entirely mitigate this. They would not want to take the chance on this. So I think what the majority of people have done here of having another location on standby would be a very risky strategy. I think informing people of the possible storm is also risky. You're not really dealing with it. I would be personally, I would be going here. I would be thinking, well, let's change the location of the conference. Now, if people have already booked flights or something like that, could you change the date of the conference? I think that would be perhaps reasonable. These top two are genuine mitigations, but I think changing the date, how much can you change the date? How predictable is the weather forecast? I don't know. So I would say changing the location of companies might be a good move. Everyone's got a different risk at risk appetite. I think really there isn't a right or wrong answer here, but I would say if this kind of thing came up in an exam, you'd probably want to reason as to why you did that. And I think using something like FMA, you could perhaps talk about the reduction in risk compared to its feasibility, for example. But I think with more information, perhaps you could answer this question better. Like have people already booked their flights? Have we already paid a deposit? That kind of thing? Let's do another question. You're doing the start of a nice long waterfall project. One risk identified is the customer doesn't want it very likely in waterfall projects. So it's good that you've realised that. So what are the S and D scores? Okay, let's see what you said. Oh, look at that. Okay. Wow. I'm surprised, I'm surprised. Okay, so the correct answer. Well, I think it's fair to say it's going to be high severity. Right. If this happened. They'd be pretty horrible, right? If your customer didn't want the product that you spent all this time making. So those who said low severity you're I think obviously wrong on this one. So it's high severity. Now I think it's tricky when you're talking about D when we don't D means sort of undetectable. Right. So a high undetectable city would mean it would be. Easy to detect and therefore it's a low on detectability. Right. Because it should be very easy to detect. Is that right? Low in detectability. Too many negatives.

UNKNOWN
Do. The harder it is to crack.

SPEAKER 6
The higher the number, the harder it is to detect. Correct. So a low D would be easy to detect. So that's correct isn't it? It would be easy to detect. The customer didn't want it because you'd give them it and they'd say I don't want that. So I think that that makes it more severe. It's at the end of the project. So if you can detect it. So so so yes, I guess I'm testing multiple things on this question. One do you know which direction goes in which I think is the hardest to get your head around. But the other one is what does D actually mean. So d is the difficulty of detecting something when the issue arises. So just because it's late in the project doesn't mean it's harder to detect. It's harder to detect at the end of the project. Yes, it's harder to predict, but that's the question of not of detectability. When the issue has arisen, can you detect it? Which is why it's it's easy to detect in this case. So welcome to those who got that one right. I'm glad to have that question in there. It's good to have questions that we're learning from. Which of the following would be the best way to improve a team's effectiveness? So we're now moving into the team work session. Unfortunately, you can only pick one, but I think quite a few of these are quite good ideas. All right, so what have you gone for? Interesting, interesting. So those people who. I'm disappointed that no one picked this one. I like this one. I think that's actually quite true. So the top one they're reducing conflict and disagreement now. Certainly if there are unproductive disagreements between team members it can cause inefficiencies. It can cause arguments. But conflict, as we talked about last week, is essential to debate and coming up with better solutions. So getting rid of conflict is not your goal. As a project manager, you perhaps facilitate that conflict and make it into productive conflict, but you don't want to reduce it necessarily. So it's a bit of a trick question, because the way it's kind of phrased, it makes you think you're getting rid of, you're sort of helping through the storming phase, potentially teams comprising similar minded people. Is perhaps efficient if everyone has a similar way of thinking, if they're all educated in the same way, they can all converse in the same language. They can all communicate on common concepts. That makes for effective communication. That's certainly true. What it lacks is diversity, and diversity is important for debate and coming up with new perspectives. If everyone's thinking in the same way similarly mindedly, they're not going to come up with any new ideas. You might as well just have one of those people. Why have three people who think in the same way when you can have one? So the answer is none of the above. So welcome to the majority of you for spotting that. Yes. Question. The best is none of the above. Yeah, none of them is the best. Yeah. Yeah. Fair enough. That question. You're right though. I was trying to force you to pick one. It's difficult to. It's difficult to come up with questions in this in this area because it's almost seems too obvious. So I tried to make it a bit harder. But you're right, it was a bit of a misleading question. I apologise. Okay, so let's look at the final leaderboard. Look at that. Some good scores on the board there. Okay. Well done. Not brave enough for getting into fourth place. You should have been braver. Could have had your name in the Hall of Fame. Okay. Shall we now take a five minute break? Would that be. Would that be appealing? Okay, so let us come back at 424, if that's all right with you guys. And I'll see you soon. And feel free to post any questions in the meantime for us to discuss in the second half.

UNKNOWN
What do I do that.

SPEAKER 6
Okay. Hopefully you've had a bit of a rest there. So a couple of questions have come in in the meantime, so I might as well answer those now in the presentation. Do we include diagrams from the reports? You are very welcome to include any visual things that will convey the value of your project to the stakeholders in the presentation. Absolutely. Will we need to memorise the EAC acronyms. So the so you will not need to memorise the acronyms in an exam situation. You would be told the full name of the thing that you were asked to expected to calculate. So instead of saying EAC you would say estimate at completion brackets EAC. So yes, if you prefer to not use acronyms, you don't need to worry about that. As long as you understand what each of the concepts is. You need to understand these the different terms and be able to compute them and calculate them. So you will need to memorise the formulae and understand that as well. So I've got a couple of things that I can refer you to. So first of all then the first question question there was about the project presentation. As you know, on Thursday you'll be delivering that five minute business pitch style presentation. We talked about that last week as well. You. It's worth reminding everyone that you don't all need to speak, but should all contribute and attend the session. If you don't attend, you will get a mark of zero unless you have mitigating circumstances. Some tips for your presentation. You'll need to handle the email from the boss in your presentation. You need to convince us that the project is beneficial, viable. Cost effective. Achievable, right? These are all the things that you need to convey in a persuasive way. Know your audience. Try to impress us all. The Mark scheme if you're interested. This stuff's all available on the module web page, as you would expect is as follows. So you're judged on the first two things are to do with the way you deliver the presentation. So how good an impression you make, how much impact you make, how engaging it is, and secondly, how well structured it is. So those are kind of the general skills of communication there. But you're also being judged on the ability to satisfy different stakeholder needs. So are you satisfying the executive right. Is the project. Does it have a viable business case. Is it going to deliver value. So think about the money. Does it deliver value to the end user. So think about what a senior user would think. Um, does it provide benefits directly to the end user in the time that in a timely manner? Does it suit the team work to suit the team? So think about the senior supplier. Is it making realistic demands of the developers and other people involved in the project? And think about project management? Of course this is a project management module after all. Think about how well managed you'll be judged on how well managed the project is. Is it it good a good plan? Is it got a convincing timeline? Has it got a sensible budget and suitable methodology of approach? These are all things that you may have. Figures that you can include from the work that you've done. If one member of your team has produced a nice figure, they can contribute that to the for the team's benefit in the in the presentation. Or you can create a figures collaboratively however you decide to do it. So yes, by all means include any figures and things to try and get these different points across in your presentation. You're also adjusting your ability to handle questions. So after the presentation, you'll be you'll be grilled on some of the details and hopefully your team will be able to demonstrate its good teamwork skills in answering those. So that's that. And now I'm going to move into the general Q&A section, where I had the one question posted before the session that I have prepared and answer for. I actually knew there were two because somebody emailed me independently. Somebody emailed me about past paper question. You might not know what that means, but it talks about FMA analysis using the values in the range 1 to 3, where one is low, two is medium, and three is high, and the person argued that for severity in occurrence probability that aligns with the lecture notes, but for detection rate and feasibility it gives the opposite scaling. So what they weren't keen on was the fact that detection rate, high detection rate should imply easy, easy to detect. So they didn't. They found that confusing. And likewise feasibility as you know, detectability and feasibility are inversely scored. Right. If you get a question like this in the exam, what you need to realise is the F score stands for in feasibility. The D score stands for and detectability. Right. The difficulty to detect. So if you think about it in the correct way then it makes sense. So detectability just a reminder is how hard it is to detect when it happens. So d a high D would be hard as always. Should always be the case that a high number is hard, otherwise the numbers just don't make any sense. And similarly feasibility. How hard is it to implement the action? That's obviously what feasibility means. That's what feasibility means. So yeah, just bear in mind that the terminology is not very good. And you need to be get these things the right way around. Hopefully that's clear. And there's no further confusion around that. Reminder of this is FMR. This is FMR. You should know the difference between the two. If I ask you to do an extended FMA analysis in the exam, you should know what that means. It means to do the feasibility scaling. So this was the one question I got about this session. Can I have exam advice and questions walk through. We will have a dedicated revision session for this to answer this question. So I have not given a lot of detail on this, but what I have done is made available the revision resources part of the Moodle web page. So on. Moodle is now a new section close to the top with lots of revision stuff in there. And the first thing you might want to look at is this thing called revision tips, revision Topics and tips. It goes through the entire module. I basically went through all the lecture notes, and for each section or each part I figured out, I wrote down what you need to memorise and what you don't need to memorise, so that might be a useful place to start your revision before you dive into memorising things. Every single one of the PMBoK processes that you don't need to have done. So yeah, it goes through things like this. You don't need to memorise all 49 processes, right? It tells you things like that for each of the different sections. And I should also point out, because I think it's worth reading. There's a preamble there which which talks about what I'm kind of looking for in an exam. I don't know if you can read that from back there, but it says I am less interested in bookwork and jargon, and more interested that you can demonstrate your understanding and application of taught concepts. So hopefully that makes it clear to you that I'm not going to be using acronyms and trying to test you on. Have you memorised these different, different formulae? But instead, can you apply them and use them in an effective way? And also as you have hopefully gathered from the course work. I'm interested in you thinking critically. If I ask you a question, I don't want you to just say no. The right answer is agile. They end. If there are four marks for that question, I'm probably expecting a balanced judgement, weighing up the pros and cons of each coming to a reasoned conclusion. Okay, so memorising facts won't get you far in that kind of question. Certainly you can memorise how to do CPM and how to do Eva and apply those formulae, and that'll probably get you most half marks on the exam to get the further marks. There's always going to be a critical thinking part to each question, where you're going to have to go above and beyond just stating the facts or stating some bookwork, but actually reasoning about it to create questions like that. What I tend to do is combine different areas of the module into one. So you've got to kind of think, what would happen if you did this with this? Like what would happen if you did print too with Kanban? There you go. I've just given you a potential exam question idea that I might come up with. That's how I tend to generate these kind of questions and then think through what that would look like in reality, what would be the challenges? What would be the problems relating to all the different things we've learned? So that's the kind of thing I'm looking for you to do, to think critically, to deal with sort of novel situations like that. So yeah, there'll be revision sessions in April and May. They haven't been scheduled yet. You'll find out at some point about that. The exam is to as long as as you probably already know, you pick four out of five questions you get to pick. So you probably just most people tend to skip the Prince two question, so you might do the same. I don't know. Each question is worth 25 marks. So that would roughly equate to about one mark per minute. So that gives you an idea of how much time you should be spending on each question or each part of question. And my aim, as I've already just said, is to test your understanding, your comprehension, your application, your critical thinking, but not your ability to memorise or regurgitate lecture note material. Critical thinking does not just mean criticising something. It's worth pointing that out before the essay as well. Some people think critical thinking just means finding faults, but critical thinking is about coming up with a balanced argument, considering different sides of an argument and questioning things, certainly, but not necessarily just criticising things. So yeah, it's about the balanced argument. That's what I mean by critical thinking. It's worth perhaps exemplifying that people want to see a mark scheme. So I thought I'd just show you a bit of a mark scheme. I'm not going to publish mark schemes in this module. There are there's a policy in the department that we wouldn't do that. We shouldn't do that. But also there's a good reason behind that. It doesn't help students to see mark schemes when they're trying to learn the exam questions are really great that you can learn sort of blindly and usually, you know, if you've got it right. I agree some kind of questions where it's a numerical question, it's good to know the final answer. I can I can acknowledge that. But you should be able to find the answer in your lecture material. You should know if you've got it right once you've finished revising and all. A mark scheme really forces you to do is either cheat or over specialise to that particular exam question. But I'm never going to ask this question again. So there's no point you learning this exam question, right? You've got to learn to generalise beyond this exam question. And that involves you thinking about the question and working it out for yourself. That's the skill that you need to develop. I'm not I don't want you to learn to answer this question. I don't care because I'm never going to answer it again. Right. What is the meaning of planned value? That's a very boring book work question. Anyway, you could find that out from your lecture notes. What's the meaning of earned value? The mark scheme is just the definition, right? There's nothing there's nothing magical going on there. The next part here you're managing a work package containing two parallel activities, both due to take a week. And it gives you this, this project, this, this chart of costs here, which you can then apply earned value analysis to. And then it says for each activity compute them. Right. So that would be obvious again to you. You should look in the formula sheets and figure out what you need to do. Hopefully that's something you could do under exam conditions without having access to your lecture notes. But the Mark scheme basically reminds me, in case I've forgotten what the formulae are, and then you can work out the numbers from there. Now for an essay style question. That's when the mark scheme becomes a bit more interesting I suppose. But these aren't things that I other than this one, I'm prepared to share with you. To give you an idea of the kind of things my mark schemes look like, this is kind of a trade secret that allows me to. Um. You know, test you on things that perhaps you don't even realise you're being being tested on. So this one, for example, says when using the Kanban software development methodology, a colleague is blocked waiting on another team member. Should you raise the work in progress limit? That's something you should have a good idea about. Now, it's not a yes or no question. As you can see, there's quite a lot of stuff here that you can draw on from the lecture material. So the mark scheme tends to allow for different ways of approaching the question. It considers different approaches students might use. And actually there's a bit of dynamism here as well. If students all answer it in a particular way or they've all misunderstood the question, this mark scheme would be changed and adapted based on on that as well. So it's not kind of a set in stone thing. So things like why is there a work in progress limit. You might want to explain what the IP limits for. You might talk about the advantages of it, the disadvantages of it. That would potentially get you a few marks. And then what should we do instead? What could we do that's better for example, than raising the work in progress limit when you're doing this I think the mark scheme almost kind of overwhelms you with all the information and doesn't really help you to answer the question. What you need to be focusing on at any time when you're answering a question is, what is the question? What is it asking for? Have I answered that thoroughly? Have I given a balanced judgement of that answer? Have I thought critically? Have I brought in evidence from this area? Are there any other areas of the material I've learnt that I can bring into this argument? Answering this kind of question takes practice. I don't know how much of this kind of essay style question you get in your other modules, but I'm certainly looking for you to to weigh up the evidence across the module, bring in theory where possible. So if you know the Agile Manifesto and it's relevant to a question, talk about it. If the principles are relevant, bring them in. I won't be marking you on having memorised those things, but bringing those things in to form a strong argument. That's what you're getting credit for. There's many, many ways to answer this kind of question. So I think, you know, I'm sure there are students who would have got full marks on this question and not mention any of that stuff that's on my on my suggested answer. So, yes, that's that's kind of what marketing looks like. So there you go. You've got an idea now, but I'm afraid I'm not going to give you any more of these. You'll you'll have to do with that. But what will be I think useful is if you go to the module web page, you will be able to find all the past exam paper questions. The more recent ones are better because they're more representative of what we are learning. The older ones weren't set by me. They may not even be relevant anymore. So I would say these five are all probably good ones to practice with. And I also have included the feedback that I have written about each one, so you can understand how the marks were distributed on that question. Any common mistakes made by students? And I think that might be just as useful as as having a mark scheme for answering the questions. So yes, try those past papers. I strongly recommend it. And what we'll do in the summer is we'll come back and we'll do some of these, these past questions as practice as well. So are there any questions coming in here? Ali. Thank you. That's great. Can we use AI tools to rephrase essay paragraphs? If all the ideas in the paragraph are ours? I don't know what's the official policy of the university on the use of AI? Is there one? I don't know what's been officially communicated. I personally think if AI is used in that way that you've described, I think that seems reasonable, isn't being used to generate content, and you're not plagiarising the knowledge stored within those tools. But I think you should probably cite the source, cite it as a source, explain how you've used it as a reference so that there's no ambiguity. Sometimes I think if somebody sees something that's generated by AI, they probably think this whole essay is just generated by AI and they think there's no value in there. So that's the risk. It's very, very obvious when you read text written by by an AI as opposed to by a real human being. And I do think it's going to actually weaken if you've got something genuinely innovative to say, if it sounds like it was said by somebody else, that's not going to be in your best interest. So I would say, you know, by all means do so and cited appropriately. But bear in mind that it doesn't actually necessarily add value unless you're, you know, not great at writing and really need the help of a grammar checker. I think there are other tools that are probably better improving your grammar without masking the words that you've used and chosen. Grammarly, I think, is very good for that kind of thing. Hopefully that answers that question. Okay, I've already answered the one about the easy acronyms in the presentation. I've also answered that one. Okay, good.

SPEAKER 7
So let's go back to slides.

SPEAKER 6
Are there any questions in real life? And he wants to ask. No. Well, in that case, I can sort of wrap up and finish if that's in everyone's interest. I think it probably is.

SPEAKER 7
Okay.

SPEAKER 6
So what have we done in the past ten weeks? We've had some lectures. This is an example of what this lecture theatre didn't ever look like. It was never this full. Sadly, at the very start of this module I asked you what is management? And you presented me with all of these great things. I imagine if I gave you this now, maybe you'd have a slightly different view, maybe a slightly less negative opinion of what management is. Certainly the big words are all things that we've covered, but things like, let me find some interesting ones. Setting rigid deadlines. Hell. Overseeing boring. Evil, hard, bossy people. Hopefully some of these stress there. Hopefully some of these negative ones you've realised there actually they're not what management is or certainly not what management needs to be. And when you are managing projects and managing things in the future, maybe you can manage in a way that you think managers should lead and maybe that will improve things. You know, I've brought in five guest lecturers who have shown you perhaps their way of managing things, and hopefully they've shown you that managers aren't all kind of bossy, evil people, but actually can be quite decent people. Really. They're people. People. And I think that's really what management needs to be about, about effective communication, dealing with problems. And I think, you know, when things go wrong, sometimes managers do become quite nasty. I have had guest lecturers in the past who have been quite evil. One guy talked about throwing, throwing things at the wall and things and you know, I didn't invite him back. So I I've presented a biased view, perhaps, of what management is through my choice of guest lecturers. So I apologise if I haven't given you a representative for you, but I think the people I've brought in are people who are really good at doing that job of management and, you know, they don't come across as strongly opinionated and, you know, they come across as very polite and they want to listen to you and they they value the questions and the feedback that you give them as much as they value sort of speaking and telling you how things are. So I think hopefully that came across they role models. I think good managers should be not not like this guy. I asked you earlier in the module about Prince two and you told me it was versatile and scalable, allowing teams to work effectively whilst ensuring the project is kept under control, increasing the overall probability of project success. So you are believers in Prince two? I wonder if you still are obviously our guest lecturer, who presented quite a contrasting view to my theoretical version, and hopefully that gave you some perspective. I know that having guest lecturers coming in and telling you about things that aren't necessarily examiners might feel like your time is not being best spent, but I think what it gives you is that perspective that is lacking if you just learn the theory. And it certainly means that if you if you understand the guest lecturer content, I think it will make you better at answering the critical thinking questions. It'll make you way up the evidence that I have given you in the theory. So I do think it is adds valuable context to my my content. So hopefully you you've appreciated the guest lecturers and their and their role in this module. We've all seen a lot of theory. You know, we've learned various techniques. Hopefully now you're great at these project network diagrams and understanding these planned value curves. And you can manage the iron triangle effectively in projects in a numerical way, in a quantitative way. And many exam questions will be around that kind of thing. We've talked about all different ways in methodologies of approaching software, from waterfall through to Kanban and everything in between. You told me that you've got a very, very varied risk appetite. Some of you are very risk neutral, others of you are very risk averse, risk averse. Down at the bottom here. It's interesting that everybody is different, right? We all have different views on these things. And being aware of these biases is important as well. And we have a whole range of different personalities in the room as well. And hopefully within your teams, you've figured out what kind of balance you've got within your teams, because I think that's quite interesting. So we've had lectures, we've covered some theory, but we've also balanced that with some guest lecturers who have provided a bit more perspective. Tibor taught us that common sense, poor communication and egos are big problems in Prince two projects, and I think he's absolutely right on those three things. However, he takes a very sceptical view of Prince two. He is quite strongly against it, having been fully trained in it and qualified in it. He decided he didn't like it at all. But every time he presents that stuff, I feel like with some of the criticisms he makes, you can actually find good arguments within the Prince do theory to contradict what he's saying. So things like a failure in the use of common sense. But of course, Prince two really focuses in that continuous business justification. So that is where the common sense is actually built into the methodology by design. So I think some of these things he talks about are the challenges with projects in general. These are why projects fail in general. Prince two doesn't make these problems any worse. If anything, it's trying to manage them but often doesn't manage them effectively enough. But I think the methodology of Prince two actually is intending to mitigate some of these challenges. Failure to communicate is dealt with through defined roles and responsibilities, for example. Right. So yeah, other than kind of problems with managing your board and appointing your board with egos and things like that. But again, the fact that you've got a board and you've got egos on there, you know, with other methodologies, you might not have a board at all. So you won't have any stakeholder representative, let alone. One that's egotistical. So again, I don't think these are problems with Prince too. So maybe you should take some of his scepticism with a pinch of salt. If you are pro prince too. Certainly in an exam situation, it's good to think about these different things and think about how you would defend them or protect against them. If you were designing a project. We had. What's his name again? Software man. Then remember his name. John. John, artist from software, came and told us. I think I think John's great. I think he really presents himself as a, as a leader of true agile teams. The thing with the traffic light, when the build was broken, I thought that was really cool. And you know, the idea of not faking it. You can't just fake agile and expect it to work. I think that's a really important message. These idea of cargo cults where if you wave these flags, you expect planes are just going to come and land and bring supplies. That's not how it works, unfortunately. The same is true of agile. You can't just pretend to be doing agile. And that's why when earlier when I presented D&D and Prince to agile and safe you, if you're using those methods, you really need to question is this really agile or which just pretending to be agile? And it's really not about the how do you manage the stages and how do you manage the team. It's how do you manage the management, how do you make that management more agile to embrace what the teams want to do? And that's the thing that is kind of perhaps missing from all of those methodologies I talked about earlier. And then we had Kathryn from Kantar. She asked you what your favourite tech invention was. It seems like you all love ChatGPT, which is kind of unsurprising. Yeah, I'm sure this slide is different every time she asked this question, but I think also she presented some interesting, interesting agile projects. We have Craig from finance who perhaps took a more serious approach. I think on the risk scale, he'd probably be at the very risk averse end. He probably has to be for his job. So he talked about a lot of the different risks and, you know, disambiguate dependencies and assumptions and things like that. I would say that that that is theory and therefore would come under examined content. So it's worth being aware of, of that. I mean, I suppose if a guest lecturer has presented a theory in a way that is I guess, understandable and makes sense, then it may be something that I could test you on in future. Hopefully you understood it at least. And then we had Amanda, you talked about waterfall versus agile or both. I thought this was a bit confusing personally, so I wanted to clarify something on this. So. I think she was when she was talking about waterfall. What she was talking about was Prince two with waterfall stages. When she was talking about agile, she was talking about Prince two with agile stages.

SPEAKER 7
Um, so.

SPEAKER 6
Yes. So I'm not sure if that changes what answers you would have given. Because you wouldn't have. What we got here, you wouldn't have managed by exception necessarily, in all waterfall projects. That's a Prince two thing. Right. And. Do we have? Here. We do our stages on there anyway, do we. But yeah. Okay. But there was a question about the definition of done and that's something that she answered. But you know, the idea of definition of done is about how you specify in an agile world, right? You've got user stories, and those user stories define what your users want. But they're very kind of vague. They're very convenient and very usable and very effective for for teams because they can unpick the who, the what in the wife of the project and figure out what they're going to do. But once they've done that unpicking, they define a specification in a not in a waterfall way, but just you've got to provide some detail of what you're going to do. You've got to define the scope somewhere. Otherwise there's a risk of scope creep. So that's what a definition of done is. It's really the specification for those different items once you've fleshed them out and thought about them carefully. So it's the development team that would come up with this definition of done rather than the management team who would create a specification. So it's still agile, right? It's still the team making those decisions. But the definition of done is something that I think it's important that you're aware of. And nobody said ensuring the quality of project product. But I think quality is a crucial element of both methods and I'm not sure she she stressed that when she responded that one. So I think it's important to review where that quality is really what's being achieved through through both waterfall, where you ensure quality through rigorous specifications, and in agile where you ensure quality through constant customer feedback so they get something that they want. That's what quality is, right? So quality is an essential element of pretty much every methodology you want quality. So that was the guest lectures now summarised and finally the seminars. So in the seminars you've obviously learnt to play with post-it notes and had a lot of fun with that. I think that's all we learned in the seminars. I can't remember anything else. There's no other slide anyway, so we'll just stop it there. So yeah, we learnt hopefully to put some of these things into practice in the seminars and that's the key. So we've covered a lot in the lectures. We've covered the theories, the methodologies, practical skills in the guest lecturers. We've put that into context with real world experiences to hopefully make sense of some of that stuff. And in the seminars, you've got to go to practice your creativity, your teamwork, and develop problem solving and compromising skills. I guess the take home message I want to deliver is that it's the soft skills that are going to matter in your future career, right? So there are going to be some hard skills and the exam is going to it's going to punish you and make sure you can do all those hard skills. But really what matters in this module is the soft skills, because that's the thing that's going to shape your future careers as software developers. You're going to be having to deal with people. You're going to be having to deal with projects, you're going to have to manage problems, and you're probably not going to get your FMA diagram out and start putting the numbers in there. You're going to have to deal with things in a more intuitive way. And I think making some of this stuff part of your standard toolkit will help importantly to think critically. Don't just follow a methodology, don't just apply a method, but really think about why that method is the right one to choose. After all, this is a computer science module, not a business school module, which is why I've got the obligatory tagline more or less RBS, RBS standing for Business School, of course. So thank you. That's the end. I hope you had a good time. And yeah. So we are at the end. But as you know module feedback is very important. Feedback is very important to me in general. So if you do have time to spend three minutes filling in the feedback survey, myself and the tutors would appreciate it greatly. If you can do that now that'd be brilliant because then it's done. If you haven't got time now, please do try to remember to do that because it's really, really valuable. Thanks everyone.
