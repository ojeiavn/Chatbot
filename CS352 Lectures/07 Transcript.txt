SPEAKER 0
That if you take any set B in that sigma algebra, and that's why we needed to be sigma algebra and not the powerset. So that implies that if you take all of these to be in B, these will also be in F. Okay. So that's something we haven't done. But it's there as a theorem similar.

SPEAKER 1
To how we construct different sets of the real numbers. From the definition of the sigma for being between minus and.

SPEAKER 0
I mean it has to do a lot of with this being solved. I mean, these come from these manipulations in their sections and complements. And you can you can do that. And then that allows you to define the distribution on that space, because you need that for every B here. This makes sense in the original right. So remember you go from this one to build this one. You're using this.

SPEAKER 2
Yeah.

SPEAKER 0
So okay. If you take any B here, the way it's connected is p b x of B is a probability of all omega action in p. So you need that to be enough so that it's defined. Yeah.

SPEAKER 3
So that's.

SPEAKER 1
Okay. Thank you. That's all.

SPEAKER 0
Right.

SPEAKER 3
Good.

SPEAKER 0
Anything else.

SPEAKER 4
Oh yeah I had a question about the last thing you wrote. Yeah I was confused about how we got there.

SPEAKER 0
This one. Yes. So this so you can write it. So this is the event of x equals little x and y in the support. And you can write that as y as a union. So it's easier to write that as first as well I did raise it. So it's not your fault. But you can write that as x equals x in this section y in the y. And then this becomes x equals x intersection union y equals y y in the y. And then it becomes in the well. Yes union of intersections I. So this y in the y of x is x in the section y equals y. So and these are disjoint. So you can use probability mass function. Or you can put it then back together as x equals to show joint event. And yeah so then it's disjoint. So you can have the sum. And these are these will correspond exactly to P to this joint distribution. That's why you need to go back to just single outcomes to be able to use the probability mass function. You know it's the very end. So it needs a bit of I rushed throughout through it and it needs a little bit of thinking. But it's the idea of playing with these sets.

SPEAKER 3
Yeah.

SPEAKER 4
All right. Thank you. Thank you very much.

SPEAKER 3
Sorry. I'm off to be worry. A lot of questions after your sessions. Sorry. You get a lot of questions after your sessions. Yeah, which is fine.

SPEAKER 1
It's good that they're engaged.

SPEAKER 3
Yeah, yeah. Right.

SPEAKER 5
Very quiet today, isn't it? Okay, I guess I'll get started then. So we're going to sort of resume the work we've been doing on Lean and Agile. So we're going to be picking up on that. So it's very echoey I don't know how to change that. Apologies if it's equity at the back there. So just a quick recap of what we've done so far. So we've initiated the projects. We've thought about different planning techniques. So the traditional things. And now we're kind of in the execution stage. Right. And that's where we've talked about traditional project traditional execution, which would be the waterfall method, which isn't really a tradition. It's just a lazy approach. And of course the lean in agile, which are two complementary methods. That doesn't mean you choose one or the other. You can actually use a combination of the two different ideas to come up with a methodology that suits you. So there's different flavours of of execution of the project. Okay. So we're going to start with a bit of a scrum quiz just to check you've understood what scrum is all about and just to get everyone woken up. So Logan DevOps worked at the UK for seven. The first question is who's responsible to measure the project's performance? So I know I rushed through this quite quickly last week, so hopefully this quiz will give you the chance to wake up and and figure out what needs to be what this stuff means. So who's measuring the project's performance in scrum? I'll give you all a few seconds just to get logged in. 18 123456789 ten. Okay. Hopefully the people at home are also able to to see us and hear us. Please do log in from home as well and answer these questions. Okay, I'll stop this question here. So who's measuring the project's performance? Now, measuring performance doesn't sound like something very scrum like, right? So, as you might imagine, many of you said project manager thinking, you know, kind of managing the project. Well, there isn't really a project manager in scrum. Okay. So the kind of the business side of things, he's kind of not even mentioned in scrum, it's not really talked about. It's like a dirty secret. Maybe, you know, that side of things isn't really part of the scrum methodology. So the answer is in project manager, the answer is the product owner. So the product owner is that person who represents the customer's view. They're the person who's kind of gathered the requirements into user stories. They are the person who's ultimately making sure that the project delivers what the customer wanted. So they're the ones who care about the product's performance, the project's performance. They should say they're the one who cares that the customer gets what they asked for. That's their role. So really, they're the they're the link between the business and the team. They're the only real designated role in scrum, because the scrum master is actually just a member of the team, just one of the team. They're not like a manager or a boss. So the answer to that is product owner. Okay. So the product backlog, this is the big backlog of requirements gathered from the customer. It should be ordered on the basis of which of the following. So you remember our guest lecturer talked about the tee shirt sizing and planning poker, whether things were being estimated that might be something to think about. Okay, a few more seconds to get your answers in there. The numbers are slowly ticking up as people are managing to get logged in and choose funny usernames. It's very important to have a funny username, so that's okay, I understand that. Okay, so I'll stop it there. So how is the product backlog being ordered? Okay. So very very interesting. And and importantly you recognise that it's important that you're delivering value to the customer. If you were doing a lean methodology, maximising the flow of value to the customer would of course be ultimately what you're trying to do. So that is that is what you're prioritising. You're prioritising getting the picking the best things off the backlog. Now of course, we will also be estimating the size of those items. But we're not picking you're not prioritising based on the size of the items. We're picking the highest value items that we can manage to do within a sprint from the backlog. So absolutely right. The value is a really important thing in scrum, in lean and in agile, in all of those and all of these methodologies, value is critical value to the customer. Okay, good. One of the main responsibilities of a Scrum Master. So you can choose up to three here. I think you got to press submit. Once you've chosen your three. In case you hadn't spotted that. So some of those are quite obviously product owner things. So hopefully you've spotted the difference there between the two. So I'll stop the poll there and see how you've done. Okay. Quite a spread. These are all obviously important tasks. So I'll show you the answers now and we'll talk through which ones they are. So majority of you there have recognised that there's kind of these daily scrum meetings, sprint retrospectives. These are the kind of things that the Scrum master is going to have to facilitate. They're kind of the liaison between the different team members. They'll have to consult with the development team, make sure that the team knows what's going on, in particular removing impediments. That's one of the main things they'll be doing. They'll be helping the development team. So they've obviously got to consult with them. They'll also talk to the product owner and make sure the team and the product owners view are sort of in alignment. So they're kind of doing that communication side of things. What they're not doing is dealing with the customer. That is the domain of the product owner, okay. They're not helping the product owner with the product backlog. The product owner is kind of sits outside, and the product owner might even span multiple scrum teams. Now the top one there is the kind of the only trick on this slide. They're not managing the team. There is no management in scrum. It's scrum is all about self-organising teams. Okay. So they're not managing the team now. They might be helping the team to ensure progress, but they're setting up managing. And that's not a word you would want to use within within scrum methodology okay. So it's important to spot that distinction. Okay. Next question. So what is the significance of determining a definition of done. In case this wasn't made clear last week, the definition of done is something that's chosen for each user stories. Each user story will also have a definition of done associated with it. So hopefully it's quite intuitive what that means. Let's see if you can understand what its purpose is. Okay. Don't forget to press submit. Then. I'll close the poll in just a second. Okay. The numbers are still going up. I'll give you a second. Right. There we go. Good. So what's this definition of done for? Well, the last one there. Well, I'll show you the answer and then we'll talk through which ones they are. So it's the last three. So certainly it's about that last one. The most of most of all I think developing that common understanding amongst team members, it defines what it means to be complete. Right. Because you can't really sign off something in a scrum until you are satisfied that it meets the objective. Now that user story is a bit vague, perhaps in some of those details. So it really specifies the requirements of that deliverable. Right. If you're using kind of two terminology. So it develops that common understanding. So people can can say this is this is the definitive scope of this unit of work. This is how we're going to do it. And what that means is that when you produce it, when you've when it's built, it really will do what it's supposed to do. It will fit in with the other components, it will mesh. Everything will work as planned. So it's that specification, right? So that means the increments are going to be potentially releasable. And that's important right. Working software Releasable code is one of the core tenets of this methodology. Right. So that's what it's for. So it increases transparency as well. It makes it very clear what's going on basically. The top one there. It certainly determines the objectives to some extent of why that work item is being done. But it's not about the objective of the sprint. Okay. It's kind of it's specific to a work item. It's specific to a user story rather than a sprint related thing. So that first one I guess could have caught you out a bit there, but certainly it does capture more detail than is present in a user story. You can argue that the user story itself is what captures the objective. The definition of done is actually capturing more the detail of the scope rather than the reasoning behind it. Okay, next question. I think this might be the last one. What is done during a sprint review meeting? Now don't confuse this with the other types of meetings that happen. There are multiple different types of meeting in in scrum. So what's done specifically in the sprint review? I'll give you a clue what happens at the end of the sprint. Just if that wasn't obvious. Okay. Get your answers in, then ask for you. Very good. Okay. So the sprint review meeting. Let's have a look at the answers. Okay. So there are two choices there. So certainly the whole point of the sprint review is that you are presenting a demo. At the end of the sprint. You are showing your customer what you built for them. You're showing them they're working code and you're getting their feedback. It's really all about reviewing that sprint and making sure that your next sprint makes the correct corrections and improvements to continue adding value for the customer. Okay. You don't discuss the improvements to apply for the upcoming sprints. That kind of happens later. You know, the conversations about how we're going to add more items to the backlog or what we're going to choose happened in the sprint planning meeting for the next sprint. The sprint review is happening with the customer, so you don't necessarily brainstorm with the customer what you're going to do in the upcoming sprints. It's up to the team to decide what they do in each sprint, but this is the opportunity to get some feedback from the customer. So it's crucially that direction from the customer to the team. So it's about presenting the performance to the stakeholders, to the customer. It's not about inspecting progress. Inspecting progress is going to happen in your daily scrum meetings, discussing architectural and technical aspects of. That's also going to be something that's going to happen within the team. It's not a customer facing thing at all. Okay. Don't confuse this with the sprint retrospective. The sprint retrospective is where you maybe that's the next question. Maybe I shouldn't say that. No it's not. The sprint retrospective is where you discuss as a team how you can improve for future sprints. That's where the team reflects internally rather than in a customer facing way. So let's look at that leaderboard Oliver. Well done. Four out of five. Which one did you get wrong? I can't remember I can't remember probably the easy one. Okay well done to everyone else for giving it a go. Still some good scores on the board. You can improve that later on today. So now I'm going to rush into the lecture material because we do have another guest today. So I'm going to go a little bit quickly. That doesn't mean you can't post questions or stop me at any time with the question if you do want to. Okay, so we finished the last session by talking about these daily stand ups, and I kind of complained that they can get a bit a bit nerve wracking or a bit boring or a bit stressful, depending on your personality. And I argue that may be some kind of visual way of representing progress was perhaps in some ways gentler on team members than a kind of a direct approach. Now, I think this approach works really well if the team has trust, has camaraderie, and that's one of the central tenets, of course, of scrum. But that doesn't you can't just magically create that. The beauty of Kanban is that a visual board removes the ego and the human from the equation, and makes it very easy to see what's going on, and really facilitates those easy conversations that might otherwise be more difficult. So combining agile and lean might be a good move, I guess, is what I'm saying. And we talked a bit about Kanban last time. We talked a bit of it in terms of McDonald's burger production line as a very efficient way of getting the flow of product to the customer. And we're going to talk a lot of a lot more about that today, because Kanban is a really fascinating science, and we're going to get to have a bit of experimenting with that as well in our seminar. So we're going to talk a lot more about Kanban today. And I just want to try and explain to you how you can make your computer code like like burgers basically. So today's lecture then it's going to cover some lean concepts, some some real basic theory of lean. Then specifically Kanban, how we optimise that and perhaps some of the ways of scaling up agile and doing agile in different ways. There are lots of flavours of agile, and then we'll move on to our guest lecture after that. So a lot to cover. Unfortunately this is some of the more interesting stuff, so hopefully it'll make sense. So when lean was coined by Toyota, they had this concept of a lean house. The house looked like this very Japanese looking house I suppose, supported on these two pillars. Yeah. So let's talk a little bit about what some of those components are. But fundamentally this whole thing is kind of a stable work environment, right. There's a kind of a bedrock on which things are based. You can't have instability because then the house might fall down. Right. So stability is important. And what else should I mention at this point? I'm not sure. Let me just check if there's any notes on here. Okay. So yeah, it's got a stable base. And we'll talk a bit about these components of the base later on. It's got these two pillars. One of the pillars is called Just in Time. That means it's important to do things sort of late, make decisions late. And then you've got this idea of judoka, which is all about automation, right. Which we'll talk about again later. So with doing things late and automating things to avoid errors, you end up with a high quality product. And that helps you achieve that goal of high quality, low cost and short lead time. So hopefully you can see how just in time and automation help achieve this high quality and short lead time. We're going to talk about this a bit more. And there we go. Those are the notes I would have liked when I was just explaining that stuff. So just in time, the idea of keeping value flowing by not sort of predicting what people are going to want, but do things on demand to to their requests. Right. So it's about meeting demand, not predicting demand. That's pool. Right? We talked about pool last week. Pool is a really essential concept within lean. And it's it's a pillar of this lean house. And judoka means we stop when there's a problem. We use automation where possible, but we stop when there's a problem. We don't just keep on going, we don't just keep producing a bad product. As soon as there's a fault, we stop everything and go and fix it straight away, right? It might feel more efficient to, you know, just keep on going. And you know, you know, you don't you don't want to stop production. Right? Stopping production seems like a horrifically inefficient thing to do. But of course, if you're producing imperfect products in the long term, that's not in your best interest. So fixing that problem as soon as possible is key. So it's about that intervention, not just, you know, off you go running the system and not doing anything about it at the bottom there had to be achieved stability. Well, one thing is this thing called high junker, which we'll talk about in a minute, but it's the idea of having small batches and reducing Mura mura. Is that unevenness that we talked about last week when we learned our Japanese last week? We want to remove unevenness from a workflow because that creates inefficiencies. So we want production levelling. What that means is smoothing everything out. So there's a constant smooth flow of work in software. That means lots of small work items, lots of small work packages, lots of small features. Not one big thing that could be a bottleneck. If you're thinking about critical path analysis, you don't want lots of irregular sized tasks. If everything's evenly sized, you're probably not going to have so many critical paths, right? So you want to kind of level out production and avoid those kind of issues. And this other concept here called kaizen Kaizen means continuous improvement. What it means is you're constantly improving everything, all aspects of your system. So you keep rebuilding your house. I imagine the lean house. I bet the pointing is amazing, right? They've they've kept that house in very good condition. The roof probably has no missing tiles. They probably paint their windows on an annual basis. Right. It's all about that continuous improvement to the lean house, the whole house. So that's something else we'll talk about. So these are kind of the concepts of lean. And I hope you can see how they relate to the things we talked about last time. So quick reminder then push versus pull pushes the idea of, you know, predicting demand. This is the Henry Ford model making a lot of stuff perhaps for economy of scale, but having to make approximations and estimations and forecasting, which we all know is very inaccurate, just in time, is about trying to figure out what demand is making just as much as you need, not overburdening, not producing too much of anything, not having any waste. Very efficient in that sense. Chidoka. This is the intelligent automation thing, I said. You kind of this diagram here shows how you kind of evolve a system. So you've got a manual system here. This person is he's putting the things into the washing machine. You think. In this version, they think, oh, here's an innovation. We can we can automate this, right? But what you don't do is you don't get rid of this guy. You don't just automate it and hope for the best and deal with the issue later on when something goes wrong, you need to have that automation, that automation. Sorry. Right. Automation is the autonomy, right? It's beyond automating. You actually are able to intervene when something goes wrong. So automation or is the idea of automation plus the ability to self monitor and stop when there's a problem. Right. So this person has to watch this now. They're not maximising their efficiency either. So perhaps a light might be a better way of spotting the faults. And then someone can come in intervene when necessary. A self monitoring machine. This would be ideal. But if you can't have this self monitoring version, you've got to have a human being ready to intervene when something goes wrong. That's critical, right? So that's the judoka idea okay. So that's how we build a lean house. We've got to think about how this relates to the other things we learned about last week and how we apply that to software. That's something I want to think about today. So we just talked about a house with two pillars supporting it. There are also five pillars of lean thinking which are not the same pillars. This is an entirely different set of pillars. And I've used this icon of a kind of a crystal water droplet thing, because it's kind of about the flow of value. I guess that's what these things are about. It's a high value item that can flow. That makes sense. That's why I picked that symbol, right? It's it's arbitrary. It's just so that you can kind of connect these concepts to what they're trying to convey. So the pillars of lean thinking then are these five things. You identify the value. Right. We know that delivering value is crucial to lean. The first thing you do is identify the value. That's what the customer wants. Basically, that's how you define value. Then you need to figure out what the value stream is. The value stream is how you get to get the value to the customer. There are steps in a process. What is the stream of value? What's the lifecycle of the product beyond use as well? Right. So from raw material to the customer using it, there's a full lifecycle there. You've got to understand every step of that process and maximise value to the customer by speeding up their time to value. Some steps of that pipeline are obviously going to be necessary to create value, and some of those steps might have some By-Products and waste that you need to trim. And this is where lean comes in, right? You've got to trim that excess so that you're only generating value, maximising value and doing nothing more. Do you need an HR division? Do you need a finance team? Do you need developers having lunch breaks? These things are perhaps necessary in some worlds, but perhaps not necessarily. In other words, you need to think about what is strictly necessary and what's strictly adding value. Do you need your developers to be? Well, let's think more about that later. But you try and establish what is waste in the system. There are always wastes. How can that waste be avoided? Do you need your customers to your team to come into the workplace, or can they work from home? Is it more efficient for both parties if they work from home, for example? So some things create create no value, but they're currently unavoidable because of the way the world is. Your workers need to somehow get to the building they somehow need a machine to work on. There are things that they need that don't directly add value to the customer, but they are necessary because that's just the way things are, and that's a type one mood. Those are very hard to eliminate, but some type two motors, these are the things that really definitely should be eliminated. You try and get rid of those straight away. So establishing what these wastes are reminded that muda means waste in lean in Japanese, we want to eliminate as much waste as we can and trim the fat and optimise the value stream. So once we've mapped it, once we've figured out what the value stream is, we can do that. Thirdly, we try and create flow. We want to make sure that value stream is moving forward. I mentioned we've got judoka as a concept in the other lean, constantly knighted here. The idea that we stop on faults. Yeah, we do need to stop on faults, but we want to minimise the amount of stuff. We just want to minimise the outages because we want flow to keep on going. So we've got to create flow and we need to establish pool next. So pool is obviously the idea that we don't predict, we don't push things. We try and do things just in time on demand. And finally we seek perfection. We repeat this whole process making continuous improvements to seek perfection. So that's the Kaizen idea in the last one there. So these are the five things you need to do if you're operating a lean system. So I hope you can see how these also linked with the lean house idea we just talked about there. These kind of things are kind of slightly connected. And then last week I talked about the seven lean manufacturing principles. I realise this is a lot of information and there's lots of different ways of thinking about this, and it's something you need to sort of get your head around and I apologise. I've tried to sort of make it as visually clear as possible which which version of the concepts I'm talking about. So last week we had the lean manufacturing principles. These are the Toyota manufacturing ideas, right. And these were things like eliminate waste, amplify learning, defer commitment, deliver fast, empower the team, build integrity in for quality and seeing the whole right. And we've just talked about these lean thinking pillars which were all about value identifying it, mapping it, creating flow using pull and seeking perfection. Right. So these are two different ways of thinking about lean. And on one hand they feel quite weirdly different. You know, one, I suppose, is from manufacturing. The other is more general, but they're actually they're actually very aligned, bizarrely. So let's see how they're aligned. So one of the, one of the pillars was to increase the flow of value. And what that is telling us is about is. Delivering value. That means things that we want. So we we need to have quality in it. We need to build quality into the system. Mistakes that are made. Issues, problems. Defects. They'll disrupt flow. They'll cause a stoppage. So that's not good, right? So if you build quality in from the start, if we make sure that everything we do is quality checked and perfect, then integrity is built in, flow will continue. We're not going to have disruptions to the flow. So build in is achieved by making sure we've got a good flow of value. Similarly, delivering fast is all about getting value to the customer as quickly as possible. All these ideas, like just in time, are about delivering fast, getting value straight away to the customer. So increasing flow of value certainly aligns with what Toyota decided with their seven principles, right? Another one was reduce wastefulness. Um, of course, waste is the opposite of value, right? The waste is stuff that doesn't add value. So reducing waste is the same as increasing value. So yeah, I should say that increased value is the obviously the lead pillar. I don't know why I've written it that way around, but yeah, increasing value and reducing wastefulness are kind of synonymous words. Eliminating waste then is obviously aligned with increasing value and deferring commitment. Do things just in time, just at the last minute is also more efficient because you're not going to be sort of predicting what's going on. You're doing things on demand. Okay. And thirdly, the idea of seeking perfection. This aligns with the continuous improvement concept in that we're amplifying learning. We're learning from our mistakes. We're making improvements based on those. We're empowering the team to make those decisions and to make those observations about what's inefficient. So we can make continuous improvement. So that's also a part of Kaizen. And seeing the whole is also fundamental to kaizen. So these things here I mean I've not talked at length about Kaizen yet, but when I do, hopefully that will that will sink in and make sense to you. So all of these lean manufacturing principles fundamentally are in line with the lean thinking philosophy and the ultimate goal line of lean. I think you can translate as to continuously increase the flow of value through the system. That is fundamentally what lean is about increasing that value through the system, increasing that flow, having it continuously feeding through so the customer is constantly getting what they want. Okay. So I'm going to take a moment to pause so you can breathe in so that I can breathe, and I'll see if there's any questions coming in.

UNKNOWN
Can I do that?

SPEAKER 5
Here we go. Lots of questions. Okay, so we can have a breather from the barrage of lean info and goes through them A-Z. So you're all working on your essays. Fantastic to hear. For the report. Do we need to reference content taken from the lectures? Yes, I suggest you do. If I haven't included a reference on my slide, I apologise. That's laziness on my part. You will need to find where I've got that information from. Hopefully you'll find the reference somewhere on my slides. But if not, and if you really can't find something, get in touch. I'll perhaps help you, but you should be able to google it or find it somewhere. So yes, you do need to reference content from the lectures. Could you please give us some examples of type two moods? So these type two mood is are things that are just wasteful right. The type two things that you just don't need in a system. Now most systems shouldn't have type two movies in them. It would be these are pointless wastes. There aren't many of them, but I suppose one. Type two is the fact that students move from lecture theatre to lecture theatre, rather than the lecture is moving to them. I understand that you all have different modules, but maybe there could be a system where you stay in the same lecture theatre and have all your lectures in one afternoon, back to back without moving and lecturers come to you. Or maybe you should just be sitting at home doing it online or something like that. There is. There are inherent wastes that can be and could be removed, you know, that, that aren't. So there are many types of things that are wasteful that don't need to be the way they are, but people just haven't bothered to optimise them. So that's an answer. There are others, right? We package up things in far too much packaging that we don't need, right? That's another type two muda that we can eliminate, but just nobody can be bothered to.

UNKNOWN
I can't get rid of that. Why not?

SPEAKER 5
Okay, never mind. For the essay, do we need to reference the project brief from seminars when talking about objectives? You don't need to as much reference the project brief. The whole team owns that project brief that you produced in the seminars. You can include it as a figure, so you can extract the bits that you think are interesting to your essay. Include it as a table or a figure which won't count towards your word count and and then refer to the figure. So that's what you need to do. Hopefully that answered that question. Which of the pillars do increase value and create flow. Which which of the pillars do increase value and create flow relate to in the last slide. Okay. So. Let's go back to the slide. Can I do that now? She's at the remote. Okay. So which of the pillars. So the question was now which of the pillars do increased value and create flow relate to. So these these are the pillars. Right. So yeah. So these don't necessarily relate to the lean house. But they do relate to these ideas of of lean manufacturing. Okay. So yeah I think hopefully that makes sense. Flow is not built into that lean house by that design. But the lean manufacturing principles do establish that that fast delivery, I suppose in the lean house you've got judoka, which is where it's important to have that automation, which I suppose is about ensuring that there is value flow and no disruption to that flow using automation. So maybe that's that's where it fits in there. So yeah, these things aren't kind of 1 to 1 relationship. They're just kind of closely connected. Right. Where's my mouse. There we go. What do you mean by figure in the project brief? Is this what we produce in the seminars we make? In the seminar? You produced a project brief that was a big piece of paper that was called your Project Brief. You wrote on it with markers. You're not going to include that directly in your report, because you can't kind of put that big a three, a two piece of paper into a PDF. It just doesn't make any sense. You're going to produce figures based on the content generated in the seminar. Does that make sense? You're going to produce figures within your your typed essay. Those are the things that you will be referring to. Your project brief is only 500 words. You shouldn't be writing your objectives as your 500 words. The 500 words should be your essay, your critical analysis, your evaluation, and the figures in your essay are going to be the things where you include the content that you produced during the seminars, retyped so that people can read it, rather than the handwritten version you did in the seminar directly. Is that clear? Good. Okay. I would suggest using Logitech rather than taking photos and including the photos directly in your report. People aren't going to look at a handwritten thing and be able to understand it easily. I think recreating the stuff that you did in the seminars is the right thing to do. The head is entitled count towards the word count. I don't think so. Please check the module web page for the exact definition because I can't quite remember now, but I think they don't. Which of the pillars in fact don't don't even put a title page on there. Just get straight into the essay. I think a title page is just, you know, just stick to stick to the essay. This is anonymous, right? So you don't really need a title page. You know, the whole thing should be anonymous document with just your four section so you don't need a title page. Okay. For the essay is the word limit 10% extra per section? Yes it is. It's per section. Again, check the module web page for the exact definitions. In case I say the wrong thing is the guest lecturer. Same as last time. Same as always the guest lecturer. Content is not not theoretical content. It's not assessed in the exam in the way that you would expect. I wouldn't be saying, you know, discuss this concept introduced by the guest lecturer, but the things you learn from the guest lecturer put the theory that I teach you into context. So it's important to understand what they've said and understand the arguments they make, because that's going to be really valuable to you in answering some questions. Critical thinking and things like that are really important in project management, and they are things that you will get by understanding the guest lecturer. Should we write our name in student ID and the essay? No thank you. It's anonymous. When would you use lean thinking principles instead of lean manufacturing principles? If you're manufacturing, you probably need manufacturing principles. The reason I'm teaching you this theory is because you need to get an appreciation of where this idea, these ideas come from. You would probably use elements of lean manufacturing principles or the lean thinking principles when you're developing your own lean system. So if you're developing a Kanban system, you'll probably draw on different ideas from lean to try and improve your overall system. You can use all of the methods if you want to, to have something that's really lean. Good. The livestream is only showing the slides, not the room camera. Thanks for that information. Camera is definitely turned on. I'm sorry. Folks should be working. Maybe you wrote that before I turned it on. Do you need to reference the case study sheet? No, but you should probably give maybe a sentence at least explaining what your project is about. Thank you. Glad it worked. Do you need a seat? No, you don't, but you can. And you probably can assume that everybody who's marking your essay has a vague idea of what your project is about. If you just describe it in a single sentence. So don't kind of give a big, long introduction that's going to waste your word count. But if there is a detail of the project case study sheet that you want to discuss, then you'll need to bring that in there and explain if that's a concept that you're discussing. So don't assume they've read it, but you can assume they have some general idea of what your project's about. If you provide a very brief introduction. Okay, good. Let's get back.

UNKNOWN
To this. Okay.

SPEAKER 5
Okay. So now we're going to talk about Kanban. Kanban. Then the definition of Kanban is that it's a work in progress limited pull system. We already know what pull system is. The new concept here is work in progress. Kanban. Remember what these nice Kanban boards are. Visual way of representing the work that we're doing. Work in progress says we should not have more than a certain number of items being worked on at any one time. It forces the team to only work on A and a fixed number of tasks, or a limited number of tasks. You can't go beyond that limit. Now, that's a good thing in some ways, because it prevents overburden, prevents the team taking on more work than they can handle. Task switching between different tasks is a very inefficient thing to do. I don't know how much you do tasks switching, but it really is a big mental burden to switch from one task in depth to doing another task in depth. So it's good to have one thing to focus on. Focus is better, so it makes things more productive. And of course, it's leaner to finish all of one thing then get 50% through two of them. So getting things finished is really important. So again these concepts is work in progress. Idea is lean. It's reducing different types of waste. And of course we know that a pool system is about doing things on demand. It's not like doing it a big long to do list, a big, long backlog that's going to be really burdensome and stressful and overbearing and overbearing. Instead, you take an item one at a time, you take a new item and work on it to completion, and then take a new item and working it to completion. There's no pressure. It's very much a pull system. Okay. It's leaner to focus on completing just what is required. There's no point just doing a big backlog or a big requirements document. It makes more sense to pick the highest priority item to complete it, then take the next item and complete that. That's the leanest approach so you can see that work in progress. Limiting something is lean hopefully from these arguments. So if you're doing software development, how do you move to a Kanban workflow of that? Well this is the recommended approach you start doing. Just carry on doing what you're doing now, but agree that you're going to move to a more incremental approach. Okay. Kanban is a roll the system. There are no kind of job titles. So you need to start to. But but if you're migrating the Kanban, the advice is to respect current roles and job titles and things like that. You don't want to kind of break the organisation. You don't want to break a culture in an organisation. You're trying to gradually make improvements towards, to evolve towards Kanban. This is the idea of continuous improvement. Don't. It's not saying break the current system and start again. So I guess that's a lean concept of gradually move in a positive direction. Something that's very lean though is to see the whole. Right? So what it says is you need to have leadership at all levels. You can't just have bosses telling people what to do. So you do need to change that dynamic. You do need to have a difference. You can't just be have an organisation where the boss says what to do. You can't just say only the boss decides. You have to invite junior people to have their say and have their voice heard. So that's kind of how you start to move towards Kanban by getting people talking, increasing the openness of communication within an organisation. Moving towards a more effective Kanban workflow, you need to obviously visualise workflow. That's something that you can do in a software environment. You produce a Kanban board that maps out the current way of doing things. You can limit work in progress, you can reduce the amount of jobs people are doing. You can move towards a more pull system rather than maybe, perhaps a current push system. You've got to manage flow, and that means you've got to spot where things go wrong, have those open conversations and improve the flow, make things more visible, make policies more explicit, have less bureaucracy where you can't necessarily see why you're doing things and have conversations about why you're doing things. That's how you improve the overall system. And this collaborative idea, it's all about collaboration. So this is how you gradually move an organisation that might be hierarchical Prince two style to a more Kanban methodology. You gradually make those changes. So how do you do Kanban? Well, you start with the Kanban board. You pull a high priority item from the backlog, which is how we avoid overburden. We work in progress limits. We importantly this last step we manage flow, right. We've got to identify the blockers and dependencies. We've got to figure out where the flow is is not going smoothly. When you develop a Kanban board to start with, things are going to be lumpy, right? You're not going to be delivering smooth value. You're not going to get into that rhythm. But when you get into that rhythm, things can be very, very efficient. So you've got to figure out how to get there. And that is a really kind of gradual process, kind of a magical process really. When you get there, it's very satisfying. So there's a bit of experimental ness going on. There's a lot of feedback and collaboration to happen. And you do this continuously. You just keep on taking items and keep on doing them, and they flow through the board and value keeps and deliver delivering to that customer. And there is just these tickets are just flying through. This is the kind of thing that the IT helpdesk at the university uses. This is how ticket based systems like this, where the work can be packaged up in neat, self defined chunks and just completed quickly. It's a very effective way of doing software development in certain situations. So we've got to come on board here. We are magically done. We've got these work in progress limits. That's going to stop people from being doing too much work. There's a backlog here. People take stuff from the item when they're done, when they're ready. Sorry. So seems seems okay. Right? But this person here in pink, they're blocked. They can't do anything because they've got nothing to pull from development. The tester is thinking, oh, what am I going to do now? This seems very inefficient, right? This is not maximising the flow of value to the customer. This person could be doing something else. Why isn't this person, you know, doing some development? Why isn't this person, you know, doing some more testing, right? Why can't they do these? Do something right. It's a waste of resources. So this seems inefficient. And this is exactly what Kanban is trying to avoid. So let's talk about some of those inefficiencies and talk about how Kanban would resolve them. So it's very common that you might be stuck in a situation where you can't finish your work. This person at the top here, they can't finish the work because they're blocked waiting on somebody else. Can I just start on a new ticket? Can I pick something else from the backlog? No. Is the answer. You can't work in progress is limited. It's not efficient. Think about that for a second. We'll talk about it in a moment. Some of the things that might happen the test is I think, you know, well, testing is so easy. I'm waiting around for a new tickets to appear in the backlog so I can take them all the time. I'm idle half the time. What a waste of my time. You know, I might as well be working part time. Or someone might say over testing. It takes ages, right? This is a really difficult system to test. It takes ages to test. The test is can't keep up with all the work. The backlog for testers is building up, up, up and they can't do anything. The developers might as well be idle half the time, because the testers can't get things through the flow as quickly as possible. Now, each of these, there's a strong argument for why either the statement is incorrect or how lean should resolve this. So let's talk about these ideas. Let's talk about them with respect to the Toyota Lean house. So there are two things I mentioned there at the bottom. Hi Junker, which is about getting rid of the Mura, getting rid of the unevenness by having small batches of work, small work batches and Kaizen continuous improvement. These are the two magical ingredients that achieve the flow that we need. Okay, so let's talk about them a bit more. Kaizen. This is the continuous improvement idea, the idea that we make regular continuous improvements. To all aspects of the system, to all functions. Everybody in the organisation should be part of Kaizen. Employees at all levels should be speaking up and saying there's an inefficiency in this process. Now, the university is a very big, bureaucratic, monolithic organisation where there's lots of paperwork and there's lots of things that need to be done that feel very inefficient to the people doing them. But you can't just say to your boss, I'm not going to fill in my this form, I'm not going to do this paperwork. I'm not going to produce a lesson plan. Why bother? I can just turn up and teach. This paperwork exists for a reason, but the processes aren't transparent and maybe there are inefficiencies in that system, but because there isn't that dialogue, the organisation of a university is very lean. Okay, so you've got to embrace a new philosophy. You need a culture where everyone feels actively engaged in suggesting and implementing improvements. That means you need transparency, you need conversations and the strategy to achieve that philosophy is to empower people in those decisions. So you have so if you were a lean organisation, you wouldn't just have bosses saying, this is what you got to do. You would have bosses saying, come, come to this big meal and you're going to be sat randomly with a CEO who's going to be next to some road sweeper. I don't know, you know, everybody is going to be sitting randomly and you're going to have conversations that sort of span those divisions. Those divisions need to be melted away, because if you want to have conversations that really improve the efficiency of the organisation, you need to be able to have those open conversations. So events focussed on how do we improve this company, how do we get better? It's a cultural shift. Most organisations, most people feel kind of resistant to someone saying you're doing a bad job. But if the organisation culture changed and people felt open to criticism and reflective improvement, that would improve things. So the idea then is that you start by identifying any opportunities for improvement. You come up with plans, you execute those plans and you review it. That's a pretty boring, boring cycle. But you do this constantly. This is all about finding ways to improve all aspects of the organisation. So that's what Chis ends about. Okay. The other thing I mentioned is hi Junker, the idea of production levelling. Now this is very much about ensuring you're meeting demand and maximising flow through the system. So I suppose actually one of the questions earlier, how does how does that fit into the pillars of the lean house. It doesn't fit into the pillars as it fits into the the foundations of the lean house to achieve high junker. That's how value and flow of value is achieved. So let me explain what production levelling is. Let's talk about t shirt making if you're a manufacturer producing t shirts. Now let's say this is currently the demand. Now the reason I'm telling you the current demand is because we're going to compare what a mass production production system would need to do, and therefore they need to have some idea of that demand. So. Let's say this plain t shirt. Five out of every. How many is that? Five. Six. Seven. Eight. Nine. Ten. 11. Five out of every 12 customers want just a plain t shirt. Three out of every 12, one a pocket. Two out of 12. Want a V-neck t shirt and two want a V-neck with a pocket? Right. So there are different types of customer. They're demanding different things. Now a mass production system would recognise that it's very inefficient to be changing the machine configuration all the time. So let's just produce all of one type, get into an efficient flow with that. So we'll be using these ones and then we'll produce all those with pockets and then we'll produce in. Look this is probably all of these ones. We actually make all of these ones you know. All of these circle necked ones and then stick pockets into three of them. So they found an efficient system there, haven't they? And then likewise here you make four of these ones and stick pockets on two of them. So they found an efficient way to meet that demand. Okay. But a lean manufacturer would recognise that it's better to produce things in a more even flow. The problem is you've satisfied all of customer A, but then customer B is having to wait a lot longer before they get something, and customer C's waiting longer still. Indeed waiting longer still. Right? You kind of you're not delivering flow, not delivering value steadily. This system here. Would produce two of those, and then with a pocket, then the next one with the pocket, and then repeat that and then do these last two. It's delivering a more steady flow. Now this is less efficient in the sense that the machine has to be reconfigured more often. But let's say at this point in time here your customer demand changed or someone cancelled their order. You know, you can't adapt this system very easily, whereas this one you can okay, this is very similar, I suppose, to the Toyota Prius and how it was. The Toyota were very easily able to adapt their fuel cars to hybrid cars very quickly and developed the Prius. They got first in the market by about a whole year because they were able to very quickly adapt their process. They designed their process to be adaptable, so they were already able to change when demand needed it. Now, that's not to say that mass producers can't produce things cheaper than Toyota do, but Toyota are very adaptable to market changes because of their their levelling of flow. Okay, so that's the idea of high junker. So you achieve it by having smaller and more regular batching, steady flow, greater predictability, flexibility, changing demand. If these t shirts need to be quality controlled, the people who quality all these ones get their work straight away. But these people have to wait a long time before they can do their quality control checks. This way the testers can start. All the testers can start at this point here much, much sooner, right? Can you see the smaller batching? The more regular flow gets things through the system faster. And that's key. When someone's waiting at the next stage, that's the idea that applies to Kanban. So let's apply these systems to a Kanban board. We need to do high junker. We need steady flow. If we identify that someone's waiting around then maybe maybe we need to redesign our Kanban board. So we do that through Kaizen. We find ways to adapt, change and continuously improve to flow value through that system. So that's the key. Figuring out a system that gets fast, rapid flow of tickets across the board. So let's go back to those quotes. Then. Someone can't finish their work because they're blocked waiting on someone else. Should they just start on a new ticket? I said no, and that's because taking work to improve your output efficiency is not necessarily in the whole team's best interest. In fact, it's not maximising value for the system because there is a blockage. That blockage is stopping value from flowing. Your ticket that has been complete isn't being worked on by the next person. So there's a problem, right? Priority is completion of the highest priority work. So taking on a new lower priority ticket isn't going to be the best value to the customer. Okay. So being blocked actually is a signal. It's a really important signal in Kanban. When we talked about the regulators and how when the regulator is empty, that's a signal to the kitchen. Exactly the same thing happens in a Kanban technology workflow. When you're blocked. That is a signal, right? I need to make more burgers now. Not that they need to do more work to fix the board. To fix the system, you're forced to ask, how do we solve this bottleneck? Right? So you've got to work with the team. You've got to help the people collaborate with the people who are blocking you. Improve the process, perhaps, or improve the block tickets. Help the block ticket to get flow going again. And that's the crucial thing. That's like a really big team thing. You're working together to get the flow working. You're not working on your own dealing with tickets. That's perhaps where the mistake appears in your mind. You might think I'm efficiently getting tickets off my plate. That's one way of thinking about it. But thinking that you're getting tickets through the whole flow is really to go, okay, so that was the first quote. The other two where testing was simple, or when testing was really hard and there was an inefficiency in the flow. Remember, it's a pool system, right? There's no requirement that you're in sync. You can carry on working on stuff when other people are not, and that's fine. But ultimately with the second one here, this isn't pool, right? The testers can't keep up with the incoming work, as in work is appearing in someone's to do list. That isn't that isn't a pool system. That's a push system. If there is work piling up, that's a push system. That's not a pool system. The work should not be piling up. There should be a work in progress limit. And if the developers see that the testers aren't taking the tickets, there's a bottleneck. They shouldn't keep producing more work. There has to be that signal from downstream to do more work. That's what the flow is all about. You don't just keep doing tickets and putting them on someone else's to do pile. That's not lean at all, right? When you're idle, a bottleneck is being detected. So when you're idle because someone's beyond you isn't taking tickets, you found the bottleneck. You need to figure out why they're not taking those tickets. To help the testers, you need to reallocate and reorganise the teams. You know, you might need to ask the question, do we need separate developers and testers? Should people be more dynamically taking tickets to get flow through the board? Okay, so let's do some real life Kanban examples. So this isn't what I expected. Okay. Well 17 principles right. We talked about these already lean manufacturing. How do they apply to software development. Well somebody came up with an ingenious list for software development. And they're pretty much the same thing. Eliminate waste waste, amplify learning, create knowledge. I'm not sure why they need to change that. 1 to 4 commitments. The same. Deliver fast, the same. Empower the team. Respect people I guess respect the people is how you empower a team building integrity in they change it to quality. I think people don't know what integrity means maybe and optimise the whole versus see the whole. I think it's basically the same list, right. Lean software development has exactly the same principles as lean manufacturing, and I guess that's important to realise. Software development is not that different from manufacturing. You might not think of software as a production line, but it really can be. And likewise just in just the same way software wastes. Last week we talked about manufacturing wastes. Things like transport and inventory in software. Waste in software is making the wrong product or adding a feature you didn't need, not handling the backlog properly and not prioritising properly. Having to do things again where there are bugs, overly complex solutions, overengineering things, making things too generalisable when you don't need to. Solving something in a really clever way when actually the greedy algorithm is good enough. Overburdening people psychological distress. I think they've just called it a cycle. I wouldn't. Yeah, overburdened I would say was probably better way of describing it. Multitasking, having too many tickets at once, knowledge being lost by people leaving the organisation. Having documentation is a way of dealing with with knowledge loss, of course, but that might not be considered lean either. It may be a wasteful thing because it's probably type one documentation. Of course, finding a better way of communicating, maybe more efficient communication is clearly key. So how do you envisage so Kanban board in manufacturing you should look like things like this. They actually use physical cards that they've moved from one stage to to the other. So that you knew. Oh yeah, that part's ready. I can take it into my stage and start doing my bit of work on it. So when you manufacturing, when you're making the same thing over and over again, this makes sense, right? This kind of production line is really necessary in order to manage a building of a car or something like that, where you've got lots of components that have to mesh together that meets specifications. But with software, you're building new things every time. How can Kanban adapt to fit that? When every project is different, every work package is different. There is no commonality. And what the key is to recognise is what are the commonalities, what are the things that we're doing over and over again? How do we get them to be more effective? So let's have a look at a typical Kanban board for software. You've got a to do list here a doing column and a done column. Now this is something that is very common in scrum. Just having these three statuses. It's great because you limit the work in progress. You say there are only going to be three items per column. You pull from the to do list. When it's time you can visualise the flow, you can talk about it. This seems quite good. Can anyone tell me what's wrong with this Kanban board? But we don't need to do it. We don't need to do. We don't need to do list. Um. It's kind of a backlog. It's kind of the things that you've decided that you're going to do in a particular sprint, for example. So you've picked a few items into your backlog. You might call it backlog, maybe.

SPEAKER 6
Is that okay?

SPEAKER 5
Anyone else want to venture? A problem with this? Don't be shy. Yeah. Okay, I'll tell you my answer. Okay, so the problem is that I didn't I didn't maybe maybe I didn't explain this, but I didn't limit the to do list. Maybe that's what you were getting out there. So people are perhaps can perhaps push things onto this to do list. The to do list can get very long. That can be problematic. Right. So work is kind of being pushed to an unbounded to do list. That's not really very lean to do. Doing done doesn't really map the flow of work for a particular project. Now, maybe this is generalisable and that's why it's useful, but it doesn't really talk about the different steps of the pipeline. So it's hard to optimise and it's hard to achieve any kind of rhythm with something like this. It doesn't feel like a collaborative flow. It feels like very much a solo flow. So it's okay. It's used a lot by agile teams, but there are better ways to do it. Now how about this one? We've changed the headings to be more waterfall now right. So now we have design, implement test deploy and we've stuck work in progress limits on every single one. Now that to me seems like a much nicer Kanban workflow. Visualises the flow of work maps the processes that are needed. So what is wrong with this Kanban board? Let's see if anyone at home has got an answer. Nope. Okay. Anyone thought of an answer? We're not leaving. We've got one. Come on. What's wrong with it? It said it should be a work in progress limited pool system. It needs to be a Kanban workflow. Do you have your hand there creeping up? If you've got an idea. Brilliant. Not any signalling. How does the tester know what to do? They can't just take a ticket off the person who's implementing it, right? Absolutely right. Fantastic. There is no signalling who's moving the cards. Are you pushing them to the tester to say, I'm done? Will you do this now? Or is there a pull system? There's no do column. There's no done column ready for the tester. So absolutely no downstream signalling. You don't know what to do. So okay we can fix that. There we are solved. We've got a doing and a done column. Now the signalling is clear. When something appears in the done column it can be pulled by the next person. Beautiful. What's wrong with this one? Yes. We need a limit on the done column. You're right. But why? Otherwise they just get bigger and bigger. And there's no there's no upstream signal to say they're blocked. Exactly. So that doesn't Columbia's going to get bigger and bigger and bigger. So certainly we need the done for the downstream signalling. We need to limit the done signal, the done column for upstream signalling so that people know that the people downstream are blocked. This is how the information comes from the customer back up to the developers all the way through the pipeline. This is how the regulator system worked, right? The information went to the kitchen because the regulator was empty. The information needs to feed back to say downstream is blocked. So we need to signal back upstream. Does that make sense? There's a good answer. There's also no prioritisation here. What if something is more important. It's got to get through the system. But what if there are different priorities? Maybe an urgent ticket comes in, right? You can't always know what the tick where the tickets are coming from. There's also still no load balancing. Right. You don't really. Yeah. I mean some of these tickets could be big, could cause slowness in the system. You might need to think about that too. So those things aren't dealt with by this Kanban. Now we can improve it more. We can have swim lanes, high priority standard we can have if a ticket gets blocked or parked because we aren't going to do it till later, because there's another dependency that we hadn't foreseen. We can put it into a parked column that can be useful. It's not really strictly multitasking because you're kind of you're putting it aside for a later stage for some other reason. Maybe you've added something new to the to the work log. So this things start to get more efficient. Now this. Yeah. Okay. So I'll let you think about this. I mean, every Kanban board needs to be optimised for the particular situation it's being used in. And you know, just doing this as standard every time possibly isn't the most efficient system. It depends on the workflow that you've got in your organisation. You can also do things like assigning people to particular problems or tasks you can. There are lots of different ways that you can improve it. On Thursday, we're going to do a seminar where you're going to get the fun task of developing a Kanban workflow within within the seminar session itself, and optimising it in a couple of rounds. It can get quite competitive and fast paced. It should be good fun. Okay, so we've talked about the lean House. We've applied those same concepts to Kanban in order to optimise a Kanban board with those lean concepts. In particular having steady flow of value to the customer, having small work, sorry, using production, levelling high junker to have a steady flow of value being delivered through the system and ultimately recognising the importance of blockers of a work in progress. Limits and signalling when someone's blocked or idle, the importance of collaboration and working together. So those are the key ideas. So that's how Kanban works and how it's how it really does link to the to the lean ideas that came from manufacturing. So that's lean. Now we're going to put lean aside. Now we're going to move on to doing agile. And we'll do a quick thing in just a second. I'm conscious of time, but I'll just see if there are any questions coming in. There are too many columns. Good answer. Too many columns is a thing, right? When you've got a Kanban board with too many columns that can be visually burdensome and maybe too much information. Sometimes a clean, simple signalling system is just as effective. There is no section for items that are done. That was good. That was that was correctly answered in the audience and well done at home too. You might have put something back in design that's also possible. There may be there may be a necessity to do that. The camera board doesn't handle that. Can apply Juncker to CSS coursework. Can the department apply the hierarchy to the coursework? How would the department do that? Does someone answer their own question in the board? I'm sure it would be nice if DCS could. Unfortunately, we're not lean organisations so that that question won't go anywhere beyond this session. Can you do a hybrid management style? Yes, you can do a hybrid management style of lean agile. There are many. Kanban is one such example of both a lean and agile methodology. Yes, everyone should recreate their own figures to avoid plagiarism. Or you could work together and cite work done as a group. That's also fine too, but you probably got to make your own because it's your essay and you probably have a specific thing you want to mention. Okay, back to the thing. So should you use agile? These are quite easy questions. Hopefully it's quite fun. So let's start the quiz. So these are real I.T problems now right. Your customer is a law firm. Money's no problem to them. They are super rich. They've got loads of money, but they're far too busy for regular meetings. They want to do email or even better, maybe snail mail. The law firms do like a bit of snail mail. Basically, they just want you to get on with the job. They want to give you some money. They trust you. They they really embrace these ideas of of trust. And, you know, they want you to sort of just do a good job. Basically they they respect you. They respect your work. So should you use agile in this situation? So there's the poll binary question. Nice and easy. Use agile or don't. Okay, stop the poll there. Of course you should not use agile. Well done to 19 of you who got that right. The reason, of course, is that they do not want regular collaboration. Customer involvement is crucial if the customers are unavailable for constant collaboration. You should not be using agile, okay? You really need that engagement with a customer. Now of course there are solutions to this. You could have someone representing the customer, or perhaps ask them to appoint someone who is available to provide that information. From the business side, that's kind of where the product owner fits in as well. But fundamentally, if the customer does not want that engagement or isn't available, don't use agile. Okay, now your customer is a Start-Up. They are very money conscious. They want to keep costs really low. Obviously as a Start-Up, they've got a really innovative idea. They're unclear about the viability, right? They're not sure if it's going to work, they're not really sure how it's going to work. There's some element of experimentation, but they are being very sort of cash poor. They're concerned because agile is about embracing change. They're concerned about the inevitable scope creep that's going to happen with each iteration. They're scared of those high costs. They really don't want high costs. So should you use agile in this situation? Okay. Okay. Well done. 22 of you correctly identify that this is actually the perfect situation to use agile for. When the customer preferences and solution options change frequently. Agile is ideal. Remember, agile can fix costs. They can fix and band the costs and really facilitate that scope innovation which is needed for projects of this nature. So this is exactly where agile would be ideal. Okay, now Boeing have asked you to develop a new aeroplane docking system that allows electric planes to be recharged in the air. Huge budget project. This is going to revolutionise air travel. It's going to be massive. But you know, obviously and and very clear goals. They know exactly what they want. They know exactly what they hope to achieve. But they know that mistakes are going to be inevitable. There are going to be, you know, loads of crashes and all sorts of things. That's fine. They've got the budget for it. That's fine. Those mistakes are going to provide valuable learning opportunities, because there's going to be few iterations of this before it's working perfectly. But what they really want is this system. So should you use agile? Okay. You're very good at this. You're very quick at this round. That's good to see. Okay. Interesting, interesting. So many of you are saying not to use agile here. This is a good situation for using agile. The reason being agile is great when mistakes provide learning opportunities. Now I know some of these mistakes may be catastrophic, but this firm has the budget to afford that. And they really care about that learning process and that optimisation process. So when mistakes are valuable to the process, that constant feedback, that iterative design is ideal. So agile is good here. Okay. Now you're going to do a really standard project here. You're going to clone a website into a mobile app. The design is already kind of fixed right. You're using a particular design. The other team's already done that. This is part of a bigger project. So you're one component. There are external constraints. Then setting the budget and deadline. Should you use agile? Okay, stop the poll there. So. Majority say don't use agile. And you are correct. This is because the specification is clear. You know exactly what you need to do. It's very predictable. The similar work has been done before. The solution is set in stone. Detailed specification can be written up telling you exactly what you're going to do. Work plans can be focussed with confidence. This is not really the innovation type that facilitates agile. So well done there. Okay, finally you're building the cooling component of Tesla's new rocket engine. It's hard to test this in isolation because it's, you know, it's just one small component of a much larger part. Flexibility on budget here, but the deadline is rock solid. You have to meet a particular deadline. Late changes are going to be problematic to this system. Okay. Should you use agile in this scenario? Give you a couple more seconds to those of you who haven't posted your answer. There we go. Fine. Should you use agile? Okay, so we say don't use agile. And I would say you're right. The reason this particular project, as opposed to the Boeing project earlier, is unsuited to agile is because of the modularity of the work. The thing you are doing can't really be tested in isolation, right? It can't be tested until everything is complete, with late changes being impossible or expensive. It's not really well suited for agile, so well done to the majority for spotting that. So let's check that leaderboard. That doesn't look right. Same number, same score as before. Apologies. Something went wrong there. Okay. Conditions for agile. This summarises what we just said. I'm not going to talk to the slide. But you can look at this at your leisure to to remind yourself of the different reasons why you would use agile in different scenarios. Okay. Now let's compare Scrum to Kanban that we talked about earlier. Scrum is this idea of having the team feeling this trusting bond between each other, working in these sprints and involving the customer. This is the idea behind scrum. Kanban is this idea of flowing things continuously through the system, not iterative in two week sinks, but actually continuous value delivery. Okay. Based on this lean house, now they're complementary. Based on the question we had earlier. Yes. That you can use them in combination. In common they've got this value of end user the importance of communication. But there's more continuous flow on this side and there's more iterative flow on this side. Again it's slightly with a lot of information. I'm not going to read it to you. You can look at this in your own time. It's something that you should be prepared to to debate in a lecture or in an exam. In the exam, if I ask you which to use, it's better to present a balanced argument considering both sides, rather than just forcefully saying this is a my binary decision, it has to be this and nothing else should be considered. Try to present a balanced argument. So please do study that in your own time. But ultimately quick summary. Then we should use scrum. When the work is in large chunks that can be broken, that can be broken down into smaller ones. If the work is part of a bigger series of long term things, you know, little sprints are good ways of getting getting progress towards that. You can measure progress over those time boxes and you can plan towards these longer term goals. So scrum is great for breaking down larger projects into a series of smaller stages. Kanban is really well suited to situations when the work is coming in constantly, like a like a ticketing system where perhaps customer service or a support team. Kanban is ideal for that because the work is coming up in predictably, it's kind of event driven. It comes in these small pieces already ready to go into the system. There's no kind of long term objective. It's all kind of, you know, let's get the flow through the system. There's no need for planning or long term stuff. So yeah, that's kind of the main two kind of environments where it's pretty obvious to use Scrum or Kanban, but there are many cases where you're somewhere in between and, you know, maybe some kind of hybrid is interesting. So there are lots of ways of doing agile. So this is this is an agile umbrella. You can see that these things fall under the umbrella. They're not getting wet. So you know you've got scrum, you've got Kanban. They're both kind of agile ideas and you've got scrum band which is a mixture of the two. Lean itself is kind of an agile methodology. I suppose, if you employ the minimum viable product iterative approach, but you've also got these kind of more exotic variants, you got extreme programming, which is quite a cool methodology where you do a lot of very good best practices, and Crystal, which is like a more extreme variant of that, where you try and scale up XP to different types of projects. You've got agile, unified process, you've got feature driven development, rapid application development, test driven development, different ways of iterating to achieve some value based on, I guess based on the different situation depending on what the constraints are of the particular environment. So yeah, I mean, waterfall obviously is not agile, but agile unified process kind of wraps waterfall in iterative loops. So it kind of makes waterfall a little bit less wet. Rapid application development with DSD stands for. Dynamic systems development method. It's just like a Prince two kind of version of rapid application development. You've also got safe and disciplined agile. We'll talk about those. Those are ways of scaling agile up. They add more strictness and more rules that agile doesn't prescribe in order to make it more scalable to a larger kinds of projects. So first of all, then extreme programming. The idea here is you have a series of core practices. Let me just.

SPEAKER 6
Check something.

SPEAKER 5
I want to check. Our guest is not waiting outside somewhere. Sorry. You're waiting outside. Come on in. Absolutely. No one is going to have a break. Yeah, we. I thought you might pop in. That was why I got a seat. I'll just wrap up and then I'll give him a five minute break. Okay. So I'll just quickly go through these a few variants of agile. And so we've got extreme programming where you do different interventions at different time scales. So on a kind of fast time scale, you've got pair programming, test driven development, refactoring kind of practices, which are effective ways of delivering high quality software on a day to day basis. And then you've got sort of longer term things such as setting coding standards, continuous integration, this idea of collective ownership, which happened on a larger time scale, and ultimately on this sort of this outer loop here, you've got small releases, you've got planning games like planning poker and things like that, which so you're doing different best practices at different time scales in order to, to guarantee that high quality result at the end. Crystal method. This is a variant on XP where you sort of scale up the amount of XP that you do, depending on the risk involved in the project. So yeah, I don't need to go into the details here, but the key here is this is emphasising a particular facet of the Agile Manifesto. So this is emphasising the individual interactions part over the processes and tools part. So this is like extreme programming without some of that discipline. That sort of extreme programming does all the best practices. Crystal chooses which ones to use depending on the project I suppose. So yeah, I'll let you read some of these in your own time because I'm realising I'm overrunning and eating into our guest lecturers time here. But you've got things like rapid application, test driven and feature driven development again, always prioritising different aspects of delivery. And I'm going to leave scaling agile to a future lecture because that's what I want to talk about. So what we're going to do I'm going to give you a four minute break if that's okay. Apologies for keeping it short. So it's at 425. Will resume with our guest lecturer. Sorry for for overrunning there okay. See you all in a moment. Hamas. So I've lost my mouse. I'm all right. Yes. Sorry. No, I just I realise I'm overrun.

SPEAKER 7
With what? You all right? Because I tell you what, I was loving the. You were doing the quiz question. Yes, yes, yes. And I was thinking, oh my God, am I going to get them right or wrong? Right. It was such a good test.

SPEAKER 5
I like that quiz, actually.

SPEAKER 7
It's really good. Yeah, it's really practical.

SPEAKER 5
I tend to do quite theoretical quizzes, but that one felt quite, quite honestly.

SPEAKER 7
And you know what? There's a couple I was like, you know, let me have a think of that. And I got most of them right. I got one wrong. So that made me giggle as well. I was like, oh my God, I need to go back to your lesson. Oh that's.

SPEAKER 5
Okay. That's a selected I need. Let's get out. Maybe I'll get it wrong. I don't think you did. So it is the thing is a theory. The practice don't necessarily align do they? I mean, it's not.

SPEAKER 7
Yeah.

SPEAKER 5
Real life is not.

SPEAKER 7
It is tricky because yes, it's about people. Normally people in culture can be the things aren't they. But yes, yes. Remind me, is it mental metre that you.

SPEAKER 5
No, no it's Vox fox I did I changed it in your notes just in case you are wrong. But no, that's fine.

SPEAKER 7
Just in case. I say to you, bro. Yeah, you've mentored me when know looking at me like I've grown a second head.

SPEAKER 5
So I've got this. So we'll have on this laptop here. It's not particularly big screen, I'm afraid, but that's got presented to you if you need to look at your notes.

SPEAKER 7
Do you know what I've bought? Like tempted them off. Find them just to have them in front of me and spot on.

SPEAKER 5
That's got my.

SPEAKER 7
Glasses. I can read them.

SPEAKER 5
Yes. You've got you've got them on.

SPEAKER 7
Naturally in the room I can't remember.

SPEAKER 5
No. So you should attach that somehow to yourself.

SPEAKER 7
Okay.

SPEAKER 5
And it should clip in your pocket I think. And then. Yeah.

SPEAKER 7
Ah, there's the clip there. Oh yes. I can just do it like that.

SPEAKER 5
Yes. And then you clip that onto you, there's like a little dangling microphone there. So.

SPEAKER 3
Sorry for you.

SPEAKER 5
So I guess I'll leave you to do that. That's all right.

SPEAKER 8
No. Funny.

SPEAKER 7
Because I got confused between this lecture theatre and the one where they had.

SPEAKER 3
Oh, yes. Of course. Yes.

SPEAKER 7
And I thought I was going. I'd conflated them both. Oh, my God, I got so much time. I got here at 3:30. I was like, just reading through my notes again in the car park. Then I got it and I was like, oh my God, this isn't cool. I was quickly look at my map. So anyway, I got here. You know what I'm doing.

SPEAKER 3
I'm going to turn off the presenter view since you don't need it, because I think that means I can switch between the questions from the audience. Yeah, I don't.

SPEAKER 7
Need the presenter view. Honestly, it's.

SPEAKER 3
Fine. So I'll do the slide clicking for you. Then I can switch between. That'd be.

SPEAKER 7
Fantastic.

SPEAKER 3
Simplify things for you. Yes, it's be honest.

SPEAKER 7
I was having a I thought, My God, I'm going to be late. I was on parks like almost the complete opposite. Is it the runs that are partly the physics?

SPEAKER 3
Oh, really? Okay. You've had a nice walk.

SPEAKER 7
It's beautiful. Do you know at this time of year and this autumn is just.

SPEAKER 3
That's true. That's true.

SPEAKER 7
I feel like there's more red. There's more orange. I don't know.

SPEAKER 3
Why. Oh. That's good.

SPEAKER 7
Um. And it's a lovely campus. All the leaves blowing everywhere. It's a bit wild and woody. Tough call Monday, 4:30. I know, I know.

SPEAKER 3
I've just been a busy. It's been a busy day. Impossible.

SPEAKER 7
Frost. Told me to make a start.

SPEAKER 3
Something already. So I'll hang.

SPEAKER 7
On. Sorry, I sorry if I put this on my. I might unwrap it one more time and then just put it on there. Going to make scratchy noises.

SPEAKER 3
Like, I'll let you introduce yourself. So let you go straight to your slides. Cool.

SPEAKER 7
Okay.

SPEAKER 3
Not appropriate questions when you need.

SPEAKER 7
Brilliant. Is a microphone working? And you will hear me. Okay? Yeah. Brilliant. Thank you.

SPEAKER 9
All right.

SPEAKER 3
What?

SPEAKER 7
You guys ready to make a start? Do you want me to just start by? Hi. Are you ready to make a start? Great. I want to keep you too much. I know it's been a long day. Probably for all of you. Kind of. End of the day. Monday. It's a tough gig. Hi. So I'm Catherine Attenborough. Thank you for having me here today, Ian. It's lovely to be back. Really nice to meet you all. So I'm here to talk to you about project management in real life. You've been learning about the theory I was outside watching. You were getting quizzed about when and when not to use agile just before I came in, which was quite useful and I was hoping I was going to pass the test actually. So I am a program director for a company called Kantar. They are a large data and insights brand building organisation. They have an office in Warwick, but it's a global company of about 30,000 people. What they do is they carry out lots of research to collect data, which they then analyse, turn into insights and then sell to the world's biggest brands to help those brands continue to big, to grow their brands even bigger. In my current role, I work as programme director on a brand new digital product called Brand Now. It launched in May and my role now really is about managing that programme day to day, working with software developers, solution architects and business analysts, plus marketing, sales, all of those teams just to keep the product developing and releasing new features to the clients and kind of managing all the things that go wrong as well. So it's lots of fun. I've been in the project management game for quite a long time, most of my career. Really. That's the beauty of project management. If I'm going to sell it to you a little bit today, is that it offers the opportunity to work in lots of different industries. I've worked in government, I've worked in non-profit, and since 2016 I've been working for Kantar. Project management is a huge topic we haven't got all day to day. So what I've done is I've tried to boil down some of my learnings from my career to data share with you all. So my top three truths is what I'm going to be sharing with you, which are things that I think will be useful for you to know. And we'll make sure that we've got some time. If anyone has questions at the end. So if you move on to the next idea and that would be great. Thank you. So project management is all around us. There's some kind of famous projects on this slide, right. The Elizabeth line for any of you that go into London and there's the project managers from The Apprentice, what have you. So I suppose the key kind of thing here is, is that for you, no matter where you want to go in your career, whether you want to be an architect, a developer, a business analyst, maybe a project manager, you are going to be working in project teams on project at some point in your life, maybe for most of your career actually. So knowing how projects operate, knowing the theory, but also knowing a bit about the practice will be really useful for you as you kind of go forward. And I think this is your last year, third year, they have one more year. This is your kind of yeah. So hopefully this is useful for you to know. So just before I move on to the next one, if we can use the interactive. Vox. Isn't it not meant to metre. Tell me, what do you think is the best tech invention of the last three years? So let's say three years. Or best recent tech invention. I'll just give you a minute just to pop that in. Quite hard to choose, to be honest, isn't it? Can I, can I? Yes. Of course. Getting some responses in. Still coming in. We've got 15. Can you? Oh, yeah. Everyone can see. How many? How many people have we got in here? About 30, maybe. What do you think we call it in? What did we get?

SPEAKER 3
Aha, aha.

SPEAKER 7
She knows such a hot topic, especially in the business that I'm working in. I reusable rockets, I don't know what I'm. I guess I'm a guess. I've never heard of that. I might have to google that afterwards yet. Generative AI stable diffusion. Write some really interesting things here. I mean, the point I guess I'm just trying to make really is with all of these, the chances are in some shape or form it's involved project management, whether it was to manage the build and the creation of the invention, or whether it is to kind of release it into market and then manage it as it continues to grow and develop. So I just wanted to make the point that project management is amazing is the thing that makes stuff happen. Okay. So I'm going to start with my first truth, right? And this is going to be a bit of a theme actually through my talk is around leadership because actually project management is a leadership role. So for any of you that are thinking that you enjoy leadership, or you might want to do the kind of job that involves leading teams and leading people. You know, project management is a really good choice and a good option because actually it is a team sport, and the project manager is what I would call the captain. So I think no matter whether you're using agile or you're using Prince T or you're using a hybrid of the two, and I know you've been learning about those earlier today, you're going to be working in interdependent teams. And as part of that team, you need to be working together towards a shared goal. And without all of the people in the team pulling their weight, you're probably not going to succeed and achieve the outcome that you're looking to achieve. The skills around the table are going to differ, and probably the people are going to differ depending on the type of project that you're delivering. But ultimately it is up to the project manager to create that culture and that sense of team and team spirit that gets everybody working together to deliver the outcome. Can I have a bit of a show of hands? Who here has either led a task or maybe captained a sports team, or kind of performed some sort of leadership role, got one at the back there. Two, three, four. Quite good show of hands. I'd just be really interested to know if you can put into the box. What was that experience like for you? Was it exciting? Did you enjoy it? Was it scary? Was it tough? How was it? And actually, if you haven't led a task or a project or a team just thinking about it, how do you think that might be? How might that feel? Stressful but rewarding. Yeah. Who's described my job? Any other thoughts? Everything thinking intense. It can be intense, particularly actually when things go wrong or you've got tough time pressures, hard to keep up with demands and deadlines. All pain. Oh gosh. But good social environment and enjoyable. Any more thoughts? I mean, I think responsible. It is responsible. Like I said, it is a leadership role. It certainly is responsible. Comes with great accountability. But with that I think very empowering. Yeah. So I guess I think the point I was sort of trying to make here is it can be a bit of a mix, you know, you can have good days, you can have bad days, like anything. Um, but there are things that you can do. And I'm just going to share with you some of the things that I do when I'm using agile, actually, to create that sense. But you can use it actually on, on, on Prince too. Or did you call it waterfall in your training? You refer to it as waterfall and things that you can do to help create that sense of team environment. So agile is very helpful and very kind to you when you're leading project teams, because it does foster the team environment through a lot of the group processes that you will be operating in together. And so at the start of each sprint, you're going to be doing your sprint planning together as a team. Then through that sprint, you're going to be probably having daily stand ups. Most teams have daily stand ups. Then at the end you will have some kind of show and tell where you share the amazing work that you've done in the fortnight, and then you will have some kind of retrospective where you learn together. On the project that I'm working on at the moment, we have fortnightly sprints, so we do do this in a fortnightly way. We have sprint planning on day one of the sprint. We then meet every day as a stand up. We have the sprint demo we call it rather than a show and tell at the end of the sprint that's done over teams. So there's sort of lots of emojis of hearts and smiley faces and claps and all that kind of thing. And then we have the retrospective together as well. Some of the things that I've done with the project team that I'm working on, just to really help us get to work well as a team together. And they're not they're not rocket science, if that makes sense. So really, spending time getting to know your team members as individuals is one of the most important and fundamental things that you can do. Once you get to know people's likes and dislikes, the things that they worry about, the things that they want to do in their career, maybe the name of their dog. Whatever it is, you can certainly interact with your team members a lot more effectively, and that will also create a sense of psychological safety for them. Getting to know your team personally, as well as helping the team get to know each other so often on projects. For every different project that you work on, you're going to be working with a different bunch of people because like I said, depending on what it is that you're delivering, you're going to need a different set of skills and expertise around the table. So at the start of all of my meetings, no matter what day it is, no matter what time of day it is, no matter what the purpose of the meeting is, I will always create 2 or 3 minutes just for people to connect, have a bit of a chat, say what's going on for them, how their days being that kind of thing. And it just really helps the team get to know each other. Then they feel safe with each other as well. They're more likely to ask for help when they need it. ET cetera. ET cetera. So that really helps. And then finally, I'm a big believer in rolling up your sleeves and getting into the trenches with your team. Sometimes when people think about project management, they can conceive of this project manager that sort of sits in their ivory tower, bossing everybody about below them and telling them what to do doesn't work very well. I'm sure any of you in this room, if you were in a project team where the project manager was working like that, you probably wouldn't like it very much, nor would I. I think the role of the project manager really is to be in the trenches with the team. That way you understand what's going on for them. You can spot problems more quickly, you can help communication flow more quickly. Ultimately, you're going to deliver more successfully. So that's my first truth. Do you want me to whisper? And then we take questions at the end? Or what's the best thing to do? Should we say anyone got any I suppose. Any questions on. On that one. Maybe we have a little reflect, maybe some more come questions or come through the end. Okay. So you can submit them as you as you go through. Brilliant okay. So truth two. I'm going to go out on a limb here. I fundamentally believe that agile is the best for software development. Now, I know you've had one of your quiz with the rocket or something, but I suppose that the reason that you had it as waterfall was because of the hard deadline was in it, and that you had to test it as an integrated whole rather than in iteration. So I think there will be exceptions to the rule. I think it's actually quite rare now in the world to find companies that are developing software using waterfall. You don't see it as much as maybe you used to, but it does still happen in pockets. So I think it's important for you to know about it so that you can be aware when you're out there in the kind of the not the real world, because you're in the real world, but in your career world, when you've finished, finished your degree, that you might spot it. So I'm going to give you I'm going to tell you a story, I guess, of, of a project that I worked on. And then I'm going to ask you what you would have done if you'd been in my situation to try. And I suppose, illustrate the differences between Waterfall and Agile and why agile, I believe, works best for software development, which I think is probably the most relevant kind of projects. Maybe people in this room might be thinking about as they go forward. So one of my roles in my career involves working for a large housing association in London. Housing associations for those that haven't heard of them, are not for profit organisations that are set up to provide affordable housing. And I was new in role and I was asked to deliver what was called phase two of a major software implementation. And this piece of software, the idea was that they'd got rid of five separate pieces. They brought together one big integrated piece of software that was going to do everything from collect millions of pounds in rent and manage 30,000 properties, and the rest and the rest and the rest. So it was a really big project for them. It was back then the budget was in the region of 10 million, which was a lot of money for, for, for a charity phase one had culminated in the system going live. And phase two is basically all of the features and developments that they had run out of time to deliver by the time they hit the hard deadline for phase one. So they had a backlog of features and kind of user stories that they hadn't had a chance to deliver. So it sounded quite simple, really. It was like the big projects being done. The work's been done. There's a few little bits and bobs to to make sure that happen, you know, easy. But within a couple of days of being in the role, I had people lining up at my desk, actually, to tell me how dreadful the system was, how they were having to create workarounds, how it wasn't creating the efficiencies and the time savings that they were expecting. Worse. There was actually all out war between the development team who built the system and the support team who were there to manage it. Now that it was in business as usual, the support team were complaining that the project team had delivered them basically a faulty product that they were trying to support, and the product team was saying, oh, I mean, the development team was saying, you know, well, we're far too busy to fix these problems. We're working on these new features. Go away support team and sort it out. There was also a situation where senior managers in the business were competing with each other to get the next set of features implemented, so there was war in the tech team. There was war between the stakeholders and my boss pulled me in and said, look, I need you to write a nice paper for the board telling them all of this wonderful benefits of this new system that we've just spent £10 million implementing. And I couldn't find any evidence that there was a single benefit. In fact, it was this benefit left, right and centre really. And so it was a bit of a mess. And I guess the question I have for you guys is, what would you do if you were in that situation? So I was new in my role, wanted to make a good impression. I wanted to write this beautiful paper for the board, but I had a situation where there just wasn't nothing to report. So I think we've got if we got a question on here, Ian, about what would you. What would you do? Did I send you that one? Am I in the way of the. Maybe. Yes. Have a think while the question is coming up. So what would you do if you were in my shoes? Basically, you've inherited a project that's delivered a poor quality system. Your teams are at war. Your stakeholders are arguing with each other. And you can't find any business value. I did not put it in the great. Will it show up on here?

SPEAKER 3
Stuff coming in.

SPEAKER 7
Oh, brilliant. This is project management in real life, who is some of the stressful. And I remember some of the things that people said about letting the VM stop the project. It's an option. What's the question again? What would you do if you were in my shoes? So you'd inherited a project that essentially was failing. It was being run using waterfall. It was a software implementation. Probably. Be brutally honest. Yeah. Nothing unless I get. I didn't get a raise. No. Talk to the customer. Find it. Find a different approach. Fix mistakes. Someone also said, did they say find a new PM? I did do that actually and tell the truth. But inform the board of this is happening. Present. If you who? That's great. Who's a politician in the room? Present a few benefits. So it doesn't seem like a total disaster, but subtly say it was a disaster. Nice. Come and work for Cantor. Tell the truth. Here we go. Take control. Yeah.

SPEAKER 3
Yeah.

SPEAKER 7
Okay. Thank you. So what I did do actually was I. So I suppose first of what I say is there's no right or wrong answer, actually, and there's no one answer. But what I did in that situation actually was I transitioned the project from waterfall to agile, because what it allowed me to do was to solve three key problems that I had. So the first problem I had was he who shouted the loudest was getting their features developed, irrespective of the business value that that feature was delivering. So what I did was by appointing a product owner and I don't know, you talked about you. So you guys all know the role of the product owner. And so what that allowed me to do was then that person was prioritising the backlog based on business value rather than stakeholder noise. And that allowed us to sequence the the features in the right order and ultimately neutralising the conflict and noise. So it made sure that the scarce project resources were also deployed to deliver the features that offered the most business value. Help me solve problem two, which was war between the project team developers and the support team, because what it allowed me to do was pull everybody together into a single scrum team. So there was no more us in them hierarchy that had existed previously, and it enabled the people who would ultimately support the project to learn about how to run it, because they would also be delivering user stories to build components of the product. So that created a better team environment as well, and kind of ultimately stopped the the war and the conflict. And thirdly, it stopped this problem that we had, which was around testing too late and then releasing with issues. So you probably covered the fact that sometimes with waterfall, that can be a bit of a risk because the testing all happens at the end. And then if anything goes wrong in the lead up to that phase of the project, the testing phase often gets compressed, and then the team isn't able to do as much testing as they would like to do. So we moved to two weekly sprints, which meant we was testing and releasing in two weekly iterations, and we were testing before we released. We also then were having more regularly fortnightly show and tells with the business, so we knew that what we were releasing was actually what they wanted, and it also made sure that we didn't ultimately release any more fixes or bugs that weren't working. It didn't happen overnight. So I will say that transitioning a team and a business from one methodology to another can be quite difficult culturally, and the expectations that you would have of the teams are quite different, as you probably can imagine, having seen the two methodologies and two frameworks set up side by side. And it did take a period of upskilling, actually, because learning to work with agile, it is a different way of working. It is a lot more collaborative. It does have different values and principles that sit behind it. So what we did have to do actually was put the development of new features on hold for a while, while we fixed all of the problems that we had with the existing system that had been launched. But ultimately it did create a stronger foundation from which to build. And while the project was, the phase two of the project was delivered six months later than planned, what was delivered was better quality and more robust software that, you know, delivered that the business value that they were looking for. So I suppose the point here is, you know, all businesses want to use their resources wisely. All teams want to exist in harmony. I don't think many of us like going to work and having conflict all of the time. And so for me, I think this example really showed how agile can operate super effectively when you're working on a on a software project. So that's my second truth. My third truth. So my third year, I just want to do a little bit of myth busting here. So question for you. Which of the statements below are true? If you can use the. Vox. App and just log your responses for me.

UNKNOWN
Want to be a minute?

SPEAKER 3
I think saving.

SPEAKER 7
30.

UNKNOWN
Give me another.

SPEAKER 7
10s. What do you think?

S11
Yep.

SPEAKER 7
All right. So. Okay. So agile. So agile is a simple it means no I don't mean no planning. That is great. That only. Yeah. So actually the answer is none of the above. So it was a bit of a trick question because actually. In. So some people, I guess, out there in the world and in organisations have this idea actually, that agile means that you don't bother with structure, you don't bother with planning, you don't need spreadsheets, you don't need word documents, what have you. That agile means kind of being creative and making it up as you go along. But actually what's true is, well, agile does offer unprecedented scope to integrate change, and it does allow you to pivot fortnightly as needed. It's actually super, super, super disciplined. So if we move on to the next slide, I'm actually going to just show you the next one. Yeah. So you won't be able to read in detail. Right. But I just wanted to show you some examples. And actually I think you were learning about Kanban boards just earlier won't you. So this is a real life example of a Kanban board from the program that I work on. So while agile doesn't believe in documentation for the sake of it, we do on the Brand Now program that I work on document our features in a system called Adda or as your DevOps. Some of you might have come across it and we use a product management tool called aha with an exclamation mark at the end of it for our epic definition and management. And the tech teams would really use agile. Most of the time the product managers use aha because they use aha to set their vision and then their vision, which is kind of captured in epics. And then that vision is translated down into work to do for the tech team in, in Ada. So I suppose I just wanted to talk a little bit about so what we plan, we do plan rigorously. We use scaled agile actually, or a form of scale, which I know you've run out of time to talk about today, so you'll know next time. So part of Scaled agile means planning in what we call product increments, aren't they? No program increments. I always forget what the P stands for. So quarterly. And then we plan as a team quarterly. And then that kind of gets pushed into fortnightly sprints. And behind it sits our sprint backlogs, as you can see here, and some product roadmaps and milestone plans and all that kind of thing. So I guess the point is, is that there are some some level of documentation. It's not really documents anymore. As you can see, we're using digital tools. We don't really have whiteboards anymore where you used to move the stories from left to right across the Kanban board, but you will be doing a level of planning. And these documents or tools are really essential for effective project management. We use them to communicate progress to our stakeholders. It helps us secure ongoing investment, and it certainly helps to underpin as well ongoing discussions about what features should go next. And because many businesses still operate an annual planning process, Kantar still does. While scrum teams might plan in fortnightly increments and as a broader team with planning quarters, we also still need to have an annual plan because actually the investment cycle is done on an annual basis. So the message I think for this is don't think you can get away without planning with agile. But that said, stay flexible. Your plans will change. That is inevitable, but your kind of changes to your plans will will need to be done in a controlled fashion. I just had one last thing. So I've done my three trees, but I want to make sure there's time for questions. I touched on project management as a leadership role, and I just wanted to kind of circle back on this and to talk a little bit about servant leadership, who's heard of the concept servant leadership in your agile. Have you come? You haven't covered that off. Okay. So it's a theme that's been around really since the 70s, and it's the idea that actually when you're leading a team, you're not there to boss everybody about from the top, but actually you're there to kind of hold them up, to support them, to encourage them to remove blockers, to create a safe space for the team to be the best that they can, really. So it's a way of being rather than a doing thing. And in my experience, it is the right way to lead and manage. Most of the time it is the way you'll get the best out of people. But the point I wanted to make, because I think if you haven't covered it here, it certainly will be something that if you're working in agile teams, it gets talked about a lot. It's not always the right way to lead. So I did have a recent experience actually, where I had a brand new Scrum master reporting into me. She was desperate to use servant leadership on her projects. But the team that she was working with were pretty undisciplined. We had a hard deadline. They just weren't a very mature team in terms of their structures and ways of working. And so what they wouldn't have really been able to do, which servant leadership is about is self organised. So there's this concept of actually as a team, you put people together. They they're smart. They know what they need to do and they can self-organize together. None of the team had used agile before as well. So I suppose the point I just wanted to make here was if you're thinking about project management, you're thinking about it partly because you're interested in leadership and being in those sorts of leadership roles. You will come across servant leadership. It is the right thing to do most of the time, but not all of the time. So you need to pick your leadership style for the situation that you encounter. So I guess really, that brings me to the end of of the truths that I wanted to share with you today. Ian, is there anything that you would want to add or build on that I've said that would be useful for the the group or.

SPEAKER 3
But it's a bit short in time as well. Okay?

SPEAKER 7
Yeah, sure. Let's do it. Yes.

SPEAKER 3
Yes. I come into my crew and I think, yeah, good. Fantastic that you come here and speak to us, give us this valuable advice and. I think there's something incredibly personable about you. You seem like a very friendly, nice person. Thanks, Ian. Nice to be managed by you. But I imagine you. More traditional project manager.

SPEAKER 7
That's the thing. Yeah. More.

SPEAKER 3
How do you deal with people like that in the workplace?

SPEAKER 7
You're right, I do. So I suppose it depends what the situation is I'm encountering them in. So are they reporting into me? In which case I probably have a bit more kind of authority over how they operate. Are they someone that I have to manage myself? I think at the end of the day, the key is to just understand where these people are coming from. So I spend a lot of my time trying to understand what's going on for that person. That might be driving the behaviour that isn't really, you know, because often they're being posted to me, they're being posted to other people as well, probably creating disharmony in the project team and trying to understand is it coming from a place of fear? Is it coming from a place of worry? Is it just coming from a is there a culture where that behaviour is okay? And so that's one thing also giving feedback. So I have had situations where actually where I've had senior stakeholders particularly I've had a situation where two of my team have been quite badly bullied actually by some senior people just sitting down and saying, you know, this, this is the impact of your behaviour, this is impact on my team and bring the best out of them. Can we have a conversation about what's going, you know, so I think there are times when you have to be actually quite if the behaviour is such that it's to the detriment of the performance of the team, then actually as a project manager, you have to you have to have a conversation with that person because it's going to impact the delivery of the project. But yeah, doing it in a in a way that doesn't create conflict I suppose. So, yeah, there's loads of feedback models out there. People are interested in having a look. But what I would say is yeah, you can't you can't let your team and your project team be hurt by. Grumpy stakeholders, so you've got to tackle it. Any questions people want to call out?

SPEAKER 3
Okay. Thank thanks so much for your time today.

SPEAKER 7
You're welcome. Thank you so much for having me. Really nice to be here. Thank you. Take this one off, shall I? Yeah.

S12
No, honestly, it's, you know, it's absolutely.

SPEAKER 7
Absolutely fine. Where do I. I think sometimes I see. Especially at the end of the day, because people's attention spans. Yes, yes.

SPEAKER 3
I mean, I've been rambling on about so long.

SPEAKER 7
Well, no, but you've got a few slides as well that go with it and you're giving them.

SPEAKER 3
I just think.

SPEAKER 7
That.

SPEAKER 3
You've got to think what I said there. As you were speaking, it's just it's just so nice. You know, I can imagine if you're a nice leader. Yeah, it's kind of infectious. And it trickles down, right? It makes people work well because they feel respected. Right? Whereas if you've got a bossy boss, people don't feel trust is taken.

SPEAKER 7
I've had to learn, though, and it's kind of, I bet.

SPEAKER 3
I bet you you got a deadline and people are on your back. How do you not pass that onto the team?

SPEAKER 7
I know, I know, it's quite hard and I've had some bad feedback, tough feedback as well from my team.

SPEAKER 3
Right. And that's something tough as well. You have to.

SPEAKER 7
Learn from it.

SPEAKER 3
But I mean if you want to get. Organisation who have that traditional training and they don't have the same values, the right values for an agile organisation. It's something I'm trying to explain to these guys, but I don't I don't know how to get it across to them, but you coming here and showing how you are in these situations, I think that might open their eyes to realising that there are different ways to lead. And I think that was that was the key.

SPEAKER 7
I think that's what I want you to know.

SPEAKER 8
Yes. It's amazing. Yes, yes. It's amazing career. It is a leadership opportunity, but it does come with responsibility. Yes, yes, yes. You need to be. People say, and I haven't.

SPEAKER 7
I don't always get it right here.

SPEAKER 3
No, no, I'm sure, I'm sure, but. But the way you present it here, it does sound like you get it right a lot. I realised all these different. Right.
