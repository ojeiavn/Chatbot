SPEAKER 0
Good. How? Oh. Oh.

SPEAKER 1
Okay. It's five past. Is that all right? Shall we start? Just a reminder. The session been recorded via electric capture. Hello to those of you at home. So today we're going to be covering scope and time management. We're going to do both of those things because they're quite closely related. As you will soon see. Today's interaction will be happening at the URL provided here. Warwick to act UK pm 43. We are in week three. I hope you all enjoyed the project selection seminar on Thursday. We did various things to to learn about some of the terminology, so we learned about outputs, outcomes and benefits the stuff we've covered in the lectures. Previously we talked about smart objectives and you wrote your own and you in the end presented convincing business cases. Some fantastic presentations there. Really enjoyed seeing those some really creative ideas already coming to fruition, which was good to see. So all teams were assigned a case study. Not all were assigned the case study of their choice. It got a bit competitive and heated in some of the groups, so I hope everyone has been set up correctly on Moodle and it should say on Moodle which team you're in. You should be able to chat with your Team-mates via Moodle and all the rest of it you're going to be working on in those teams, on those case studies every week or every other week from now on. So if you've got any issues, you do need to let me know if you missed the session. Haven't been allocated to a group. You'll be allocated next Thursday when you do attend, so let the tutors know I'm not going to be there on Thursday coming. So let the tutors know that you weren't here last time and they'll put you in a group. You'll still be sitting in your groups, even though we're not doing group work on Thursday, just to make the register easier. So you can have a chat with your groups then, and catch up if you missed out on on the first week. Obviously, if you've been assigned a different case study to the one that you did the work on during the last week's seminar, you probably need to make sure you've read the brief so that you can hit the ground running when your next meeting up as your group. So if there are any issues, you can let me know. You can use the the the Q&A feature. Let's try and keep the Q&A to to academic content. You know a few jokes here and there's okay, but I think it shouldn't be dominating the chat there because it might mean that some important questions get missed. So if there are some important questions in there, give them a thumbs up. Give them a vote up so that I do get to see them during the session. So I'll come back and check the the Q&A a bit later on. If you've had got any issues, do post any issues there now. In fact, I've even got a poll I think I did this last week. I might as well do it again just to be sure. So yeah. Were there any seminar issues? I don't know why. It just that every time. We break it all off I suppose. Yeah. If you have any issues please urgently let me know via this poll. Now, just so we can be clear, hopefully any clashes have already been resolved. It would be good to know. Okay, I'm assuming if you're not bothering to answer the poll, it's.

UNKNOWN
Because you have no issues. Should I stop the poll? Has anyone still not posted their response?

SPEAKER 1
Okay, I'm going to stop the poll there. It's not so exciting. This poll despite the music. Okay, so the person who is the first seven others, two people you'll be assigned to your groups on Thursday. So please do attend. It's pretty important. Good. All right. So we're going to start with a bit of a wake up quiz just to check if you were paying attention last week to see if you understand the PMBoK guide. Hopefully you've all gone away and read that cover to cover. I very much doubt that, but hopefully you can answer some of these questions. Sorry, you can't see at the top of the slide the link because the vbox writing is going over the top of it. It's the same URL as before. Warwick to AC Duke PM 43. So one of the following groups is not a process group. Which one? So this is a question about the PMBoK guide and its definitions for process groups. So which is easy.

UNKNOWN
Not a process group. Okay.

SPEAKER 1
So some people are starting to get logged on. I'll stop the question there. Okay. So the majority of you said integrating and you would be right. The process. Groups are, of course, the different phases of the management life cycle. So executing, closing and planning a role parts of that. But integrating is not a process group. That's a knowledge area. Okay. Which is the knowledge area where requirements are collected. Okay. Looking good. Almost everyone answered that. I'm going to stop the poll.

UNKNOWN
In just a second. I'll stop it there.

SPEAKER 1
Yeah, absolutely. So vast majority there realised that the requirements are the the way we define scope, the requirements specify what we're going to make and scope is those same features. So yes, obviously communication is an important part of many aspects of project management. So there will be communication involved in collecting those requirements. But the communication knowledge area is reserved for managing communication strategies and things like that, not for managing scope. Okay. Which process group has the greatest number of processes?

UNKNOWN
That's music made. The music of those you can't take up.

SPEAKER 1
Okay, I'll stop the poll there. Still seven of you not answering the questions. Do you recommend sending your answers in? If you can. I'm interesting. So quite a spread here. Quite a spread. So think about what a project manager typically does. They do a lot of planning, which is where most of the project managers work is done. They also do quite a bit of monitoring controlling. Now most of the work in a project will happen during the executing phase. That's when the programmers will all start doing their programming and building the software, or building a bridge or whatever it is that's being managed. So executing is certainly where most of the work gets done, but not the greatest number of the greatest amount of management work. So the management work tends to be in planning. And there are lots of processes involved in planning, which is why that is the dominant area. Okay. Which process group. Uses up most of the budget in a project. Sorry, typo in the question, but which process group uses up most of the budgets in the projects? Hopefully this one's quite easy.

UNKNOWN
Okay, I'll stop the poll there. Absolutely.

SPEAKER 1
So execution is obviously where the work is getting done. That's when people are hired in and brought in to actually do the the hard work. That's where things get bought and procured and spent and done. So yes, certainly executing is where the budget is spent. Mostly. You don't tend to spend a lot of money on your planning. If you spend more money on your planning than you're doing, it doesn't make a lot of sense. You might as well just do the project blindly ten times rather than just spending all that money. Planning High Speed two is a counterexample. Of course, most of the money has been spent on planning, I think, but that's probably not a very good example of a good project. So let's have a look at the leaderboard. Yes, we've got some four out of four at the top there. Those are the ones to watch today. Well done for the others. There's still time to catch up later on today, so if you can spot yourself on there. Well done. Mr. Smart's in second. In 12th place. Joint 12th place. Let's see if Mr. Smart can get up to the top today. Okay, we have some more questions. This is exciting. Which of the following is not one of the three initiating process outputs? So this is a bit tricky. This question. So the initiating process group is one of the first process groups in PMBoK. Which of these things is not the output from it? So I haven't necessarily taught you these specific things, but you should be able to work out from last week.

UNKNOWN
What the answer is here. Okay. Got the ball there.

SPEAKER 1
Interesting. Okay. So let's have a think about what these different things mean. I think I have some notes on my slide to remind me to say some things to you here. Um, nope. Nothing on my side. Okay, so. These different things are all important documents, right? The project charter is the thing we talked about last week, and I think the title of last week was. It was all about that. So the project charter is not the right answer. The right answer is the business case. Why is that? So the business case. So these documents are all things that are done during initiation, right? These are all things we talked about last week. We talked about the project charter being that document that we're doing during initiation. So that's kind of the main body of the document. We didn't talk much about stakeholder registers or stakeholder management strategies, but we did talk about stakeholder management. You need at some point to figure out who your stakeholders are and have a strategy for figuring that out. And that's something that often also goes into your project charter. However, the business case we also talked about last week is not an output of initiation, it's an input. You remember that we talked about the the precursors, the the inputs to the to the project charter were the business case and the project mandate. Okay. Those are kind of the reason why we're doing the project and the kind of the initial idea behind it. So yeah, they're the they the inputs, not the outputs. Does that make sense? Is that unclear? That was a tricky question. I realised that question. So you you will do some aspect element of that in planning as well. I think that would be a reasonable assumption. I think there'll be an element of stakeholder planning, how you're going to engage the stakeholders. But the high level strategy might be something you decide sooner than that, maybe at initiation. But I think that's a fair point. Yeah, that's a good question. It could it could also be part of planning. I think that makes sense. Okay, so you communicate with the development team in which knowledge area. So if you're tasked with communicating with the development team, which knowledge area would you need to consult to get the necessary advice? I suppose the the question is which part of the book would you need to turn to?

UNKNOWN
Okay, let's see what you say.

SPEAKER 1
Okay, so yeah, communication seems like an obvious one there. It's about how do you communicate? However, some of the others are also appropriate, right? I suppose the development team are a kind of stakeholder, although there isn't a stakeholder knowledge area. The integration knowledge area is to do with bringing all the different knowledge areas together, so that's not the one either. Resources means human resources and that's about the people involved in the project. So if you're dealing with managing human resources then you would need to look at the resources. So it's between 3 and 4. And the correct answer is three. The reason being it's to do with the management of people. So you're communicating because that's how you manage that particular element of the project. So that's how you manage the human resources through communication. Whereas the communication knowledge area is reserved for things that are not specific to any other knowledge area. Does that make sense with that one? I realise these things, these things are a bit vague. If you're writing that book, you could probably put it in either of those last two chapters, 3 or 4. I understand that, but in that book, communication is reserved for communication strategy, not the methodology of communicating. I'm missing some blank faces. Maybe I'll move on. Yeah, it's a it's a it's a bit of a tricky different differential. Difference then. Sorry about that. Okay. In which process group will you perform? Team building.

UNKNOWN
The last question.

SPEAKER 1
Okay, I'll start with all that. So we touched on this last week a little bit. So hopefully you've all got this one right. Okay. So 22 of you said executing the majority of you. And you would be correct. However, those of you who said planning, I understand why you think that you think you might need to do the team building before you start executing the work. However, the team only come together at the point of executing the work. Those people are not just sitting around waiting in a room until you finish your plan. Okay, so you're a project manager. You make your plan while other people are doing other things. It's only when the project plan has been approved will those people actually come and meet and start working on your project. It's then that you need to manage the team, do the team building, develop the team, get the team to start doing the work effectively. So projects are difficult because those people get brought together and get told this is what we need to do. We need to do it in three weeks. Off you go. There are a lot of challenges in those kind of situations. So yeah, hopefully that one is now clear to the rest of you. Hope we have another one. Bonus question. Okay. The monitoring and controlling process group contains an output called accepted deliverables. Which process is this output from? So again there's a lot of terminology in buzzword in there. But hopefully you can work it out with a bit of common sense. What's going on in that sentence.

UNKNOWN
Okay I'll start the poll now.

SPEAKER 1
Okay. So when you're thinking of deliverables, you're thinking of the things that you're making, right? These are the units of scope. So very sensible to think of, of this as being a scope related thing. However these deliverables have been accepted. They have been kind of approved. Someone has checked that the deliverables are of the requisite quality. So there is a quality element to this as well. Um. But you are right to verify scope. Let me see. I've got some notes there. This is a very tricky question. This one. Yeah. Okay. So according to my notes here. So I wasn't clear on this one either. Perform quality control. This determines whether the outputs comply with relative relative with relevant quality standards and perform quality assurance. Is the process of auditing the quality process. So even though the accepted deliverables might be checking the meet the quality that's defined, they're not this. This falls into scope. Turns out I didn't know that one. So well done to those of you who did the majority, it seems so. You're all better than me and you want to come and swap. You're welcome to. Okay, now let's look at the leaderboard. So I wouldn't be top here today. And well done, Mr. Smart. You've. You've managed to climb up the rankings. Well done. That's looking pretty good. Okay, so hopefully you can see yourself on that list. Three of you there in the top spot, so hopefully you can keep that lead as we proceed through today. So that was a bit of a recap on last week. You seem to have done pretty well there, so that's good. You've obviously done your homework. Well done. So today we're moving on now from we've been talking about goals. We've been talking about why we're doing the project. We've been motivating the project with a really solid business case. At this point, we can now start finally thinking about what we're going to do. Now, computer scientists, I've said this before, they love to jump in to thinking about what they're going to do straight away because they're great problem solvers in general. It's only now that you've got a solid motivation, should you be thinking about what you're going to do. Now that you know what the problem is? Can you define define the best solution? Now. Planning is not something you do right at the beginning and then never come back to your plan. Now you've all written project specs. Maybe you'll never come back and revisit that. Maybe you'll never look at that Gantt chart again. That would be, perhaps defeats the point of a Gantt chart. A Gantt chart is supposed to be something that you're continuously updating, so that you can make sure you detect if there's going to be any problems, and then you're going to miss your deadlines. Planning is a continuous process, and that's something we're going to talk about a lot today. And I'm going to talk about two different elements of planning to important elements scope management and time management. The way we do scope management is we break down the work into manageable chunks, into work packages. We sometimes call them. And these work packages are deliverable oriented. That means they are deliverables. They are tangible things that we can create. So we're going to talk a bit about that and why we do it that way. So when you've defined what the work is you can then start estimating how long it's going to take. Relatively obvious. So scope and time management are linked in that way. First of all, figure out what you're going to do. Then you figure out how long it's going to take. And you put all that together to figure out your timeline. And we're going to learn a couple of methods for managing time. We've learned about critical path method and program evaluation review technique or Pert. And these are always on the exam pretty much every year. Can't guarantee they will be this year, of course, but they have been for the last seven years I think. So you might take that as a hint if you like, tell it to you. So this is stuff that is it's really easy to examine. It's quite fun. It's an algorithm. So it's nicely suited to people with algorithmic brains like you lot. So we're going to do that today. But I suppose many of you might have noticed that these haven't been listed as Smart objectives. These are just a list. This is my to do list for today. So what we could do if we like is turn this whole slide into smart objectives so we can get our smart checklist up there. Is it time bound? Well, if I put this at the start at the top here, by the end of this lecture, you should have learned, you know, now, I've set a time bound to this slide that might be more useful to you to make them specific. I might get some nice verbs in there. We're going to now we're going to learn how to design work packages. We're going to understand this thing. We're going to learn how to apply critical path method. Right. I specify the number of estimation techniques we're going to learn for. Okay. Is it measurable? Yes. It will be measured on the exam. So that's good. Is it achievable. Will I get through all of this material in this in this two hour slot? Yeah, probably from experience I do tend to, but only because I rush very fast at the end. Is it relevant? Well, yes, because it's on the module approval that defines this module. So it ticks off the course objective. So yes it's this is today I've got a very smart objectives for what I want to teach you. So hopefully that should reassure you that I'm not just waffling on for the sake of it, although it sometimes feels like that I understand. Okay, so let's start with the first one. Then planning is a continuous process. So don't throw away those project specs that you've written. Keep iterating on them. This is what the book guide tells us. It tells us that once the project is given the go ahead and the charter signed off by the sponsor, the project manager then can start taking over and they break down the work. They plan their timeline. That's what we're talking about today scope management and time management. They set out some key milestones that they're going to meet. They spot any bottlenecks and any problems in the timeline. And then from all of that, they can plan how much is going to cost and allocate resources and get people to start working. Simple as that. Right? No, not as simple as that because you've got to do it all over again. So you can see that all the knowledge areas are covered in this list, right? Scope, time, risk, cost, resources, all of these things are being covered, but we need to keep on going back. When you have set up the milestones and spotted the bottlenecks, you need to go back and maybe break down the work in a different way. It's not immediately obvious when you're breaking down the work, how much you can manage to fit in the time right? So you do your scope management, but then when you start doing your time management, you need to go back and change your scope management. And then when you finally get a good timeline, you work at your budget and realise, oh, we can't afford it, we need to go back and change the scope again. And you keep on doing this until you've got a solid plan that is convincing, convincing to you, to convincing to the sponsor, convincing to everyone. So that's how project planning works. You've been through that process already. You produced your project specs, and you need to keep repeating that process as time goes on because things change. So where are we? This is the PMBoK guide thing that we talked about last time. These are all the different processes. Each one of these is a different process. These are the process groups different phases of the project. And these are the knowledge areas down the side here. So where are we today. We are at the planning stage I think there's meant to be an animation. Apologies it didn't do an awesome animation. Just imagine this column here just sort of sliding across to the right there. So this is the planning stage of the of the process. Can you see there are loads and loads of things in the planning stage? The PMBoK guide is really a big book on how to do good planning. Just because you do good planning doesn't mean you do good project management though. But if you read that textbook, that might be how you interpret things. Um. So where are we then? We are there scope, scope planning. And these are the kind of things in the guide that we need to think about. Planning scope. Management is the first thing. So that's not doing scope management, that's planning scope management. You work out how you're going to do scope management. You do some kind of meta planning of the planning. So you think about how scope is defined, how will it be validated? How will it be controlled? What is scope? What does it mean? How are we going to do this process when you've when you've agreed, how are you going to do it? Hopefully it's relatively straightforward to do that. You start collecting the requirements because figure out what you're going to build. So you might speak to your stakeholders. You might survey the problem. You know, you've got some ideas of a project already. You might look at the problem and look at a possible solution and run that by the people involved, speak to customers, that kind of thing. So you collect the requirements. Once you know what you're going to build, you can define the scope and that's going to be product descriptions, or it's going to be features or it's going to be, you know, some requirements document saying exactly what you're going to make and what you're definitely not going to make when you've got all of that, it should be relatively easy to make a thing called a work breakdown structure, which is just a hierarchical view of the work that you're going to do. You've divided the deliverables into smaller and more manageable components. And that's what management is about, isn't it? It's about breaking things down into manageable chunks. So scope management is not rocket science, right? It's pretty simple really. However, people get it wrong all the time because it's not, you know, the actual project is difficult. The actual process of managing it is not, but the project itself. It may not be obvious what the units of scope should be. So let's start talking about scope management and think about how we manage it effectively. So this is a work breakdown structure. This is what it tends to look like. You tend to have the whole project at the top and you break it into manageable components. And you might break those components into smaller things called work packages. Now you can have many, many levels of this thing. It doesn't have to be just just three like this. It could be humongous. It could be very, very detailed. You. And for each of these work packages, there may also be a whole load of different things that you need to do as well, right, in order to complete that work package. So the whole the goal of this work breakdown structure thing is to break it down into chunks that can be kind of independently solved. They don't need to sort of talk to one another. They can just someone can go away with that work package and build it for you and then come back and put it all together and you've got a project. That's the theory. So for example, this lecture course there are there is a work breakdown structure for this. Of course it's broken into lectures, seminars and assessments. The lectures they're split into slides resources guest lectures. There are various processes that I need to go through each year to make sure everything's right for each of those different things. You know, it's just a logical breakdown. It's not particularly tricky to do. Now, if you look in the PMBoK guide, it tells you that the work breakdown structure should be a deliverable oriented, hierarchical decomposition of the work to be executed by the project team to accomplish the project objectives and create the required deliverables. So all of that defines the scope of the project, and it's hierarchical in the sense that each descending level represents an increasingly detailed definition of the project work. So you can see that that definition encompasses. The why of the project. The objectives are in there, the how, the work and the what, the deliverables. So it's encompassing all of that knowledge that we've so far been thinking about in the seminars. All of that information that we wrote in the project charter is being distilled into this, this thing. Okay. But specifically at the top there, it's deliverable oriented, it's focusing on the thing you're going to make, but it has to take into consideration how are you going to make it? Why are you going to make it as well? But it focuses in the way it's written on the deliverables. And that's that's a subtle thing, but it's an important distinction. So what our deliverables, let's make that clear. They are the outputs. They are the features. They are the things we're building. But they must align with the objectives. Okay. What's a work package? Let's define that. The work package is just the smallest unit of the work breakdown structure. It's as far as we need to break it down to be able to give that to someone to do the work. So the tasks within a work package tend to be related, related to a specific output, or perhaps more than one output. There should be clear interactions, a clear interface between work packages so that there's not a lot of interaction needed. So a very clean and minimal interface between work packages. Ideally, you know, no interaction necessary. Each work package should have a very clear set of inputs and outputs and what the activities are going to be. And if you have done that properly, if you've broken it down to a sufficient level of granularity, it should be very easy to estimate the cost of doing that piece of work. If you haven't. If it's not obvious how much it's going to cost to do it, how, how hard it is, how long it's going to take, then perhaps you could break it down further and think about it some more. So it should be estimable. Okay, so that's the goal of breaking down work into those different parts. What a milestone. A milestone is just a point in time that we are kind of aiming to achieve something by, or a point of control that separates the different work packages. So we want to complete this work package by this point in time. And other work packages may depend on that having happened. So those milestones are significant. They're important that we meet them. Okay, so let's now that I've rambled on for at least five minutes so that checks that you're awake. Let's do a bit of a bit of a poll here, and figure out if you can figure out how to, whether these different features or issues, where it fits into the distinction between small work package and large work package, whether it's a pro or a con. Okay, so you could have very big work packages which have lots and lots of detail and lots of lots of outputs. Or you could have very, very small work packages that are very short and can be done in a very short space of time by a small number of people. So you need to decide what's appropriate. So let's have a think about that based on these these things here. So first question then parallelism. Is that a pro or con of a small or a large work package? Okay. Get your answer in then, please. Okay. So parallelism hopefully you realise that that's a that's a pro. That's a good thing. We want parallelism for a project. And it is achieved better with small work packages. If those packages are small, they can be they can be more clearly defined and they can be done in parallel to other things. So that achieves more parallelism and the project can be finished faster. So if you have smaller work packages, you can achieve more parallelism. Does that make sense? Okay. Good risk of overrun. So is that a pro or a con and is it does it apply to small or large work packages? Okay. Get your answer in, please. Okay, I'll stop the poll there. Risk of overrun. Well, overrun doesn't sound particularly good to me. So that's presumably a con. And it applies to large work packages. If you have a really big amount of work, there is a greater chance that there's a greater risk of it, of the overrun, because there are a lot more variables, a lot more things that could go wrong. Okay. More interactions between work packages. Where does this sit? Small or large? Okay. Get your answer in then, please. So I already explained that we don't want work packages to be interacting a lot. So this is a con and this is a con of small work packages. If you've got lots of small work packages, there are obviously lots more things that can be interacting. There's a lot more communication that has to happen to coordinate all those work packages. If you're doing all the work in one big unit, you can have those conversations within the team and they don't need to be those work work package interactions. The interactions can be done internally instead. So that's a con of small work packages okay. Which is harder to define small or large work packages. And is that a good thing or a bad thing. I think it's often quite obvious if it's a pro or con. Okay. Well done. I'll stop the poll there. So which are harder to define? Small work packages are hard. Well, hopefully you realise that it's a con and it's a con of small work packages. Now, is that what people said? Did anyone think it was harder to define large work packages? Yeah. It's elaborate. Why do you think that?

UNKNOWN
You. This is.

SPEAKER 1
Yeah, I think, I think I couldn't quite hear that, but I think I think you're on the right line. So yeah, with a large work package, you might imagine that you need to sort of define it very well because it's perhaps more important or something. But breaking something down into very small chunks is obviously hard work. Whereas the larger work package, you can actually define it more vaguely, as long as you define the boundaries of that work package and its interactions with others, the details of within that work package can be defined later. So it's actually harder to define small work packages as it happens. So it means that you just don't have to break down as many steps okay. Which one makes efficient use of the team? Okay, I'll stop the poll there. So efficient uses seem obvious. It's a good thing, and large work packages will make more efficient use of the team. Does anyone disagree with that? Nope. Good. Okay. Of course. If yes. Sorry, I can't quite hear. Do you think a team works more efficiently if they're given a very specific task? Maybe that individual would work efficiently, but the whole team would perhaps not work as efficiently, because maybe it's maybe you as a manager, aren't as good as the individual team members would be at figuring out the rest of the right solution. It's probably more efficient to let people. Figure it out themselves than it is to have some manager come up with a plan and a piece of paper and say, that's what you're going to do. This is how it's going to work. So yeah, I think efficiencies can also be achieved through teamwork, through sharing ideas and sharing code and things like that. Whereas if everyone's working on their own thing, there's probably other issues of inefficiency there. Okay. The ease of managing the team. Is that a pro or a con of small or large work packages? This was a bit ambiguous, actually. It depends who's managing. I suppose from the point of view, the manager I think this question is probably thinking of. So the person doing the work breakdown structure. Okay, I'll stop the poll there. So this one is a pro. So obviously easier is a good thing. And it's it's easier to manage the team if you have a large work package. Partly because the team is able to, you know, think for themselves. The team are kind of self managing. You know that's why it's easier to manage them okay. Problems detected late. So hopefully this one's not too tricky. So get your votes in. In which situation are problems detected late? I'll stop the poll there. Problems are detected late in large work packages because those large work packages inevitably take longer. So it's usually much later that you realise that there's going to be a risk of overrun, which is where that risk of overrun comes from. Okay, which of these is more estimable? I think that's a real word. If it's not, hopefully you understand what it means being able to estimate how long it's going to take or how much it's going to cost. Okay. The numbers are the numbers completing this poll are dwindling. People fall asleep in the lecture theatre. I can't see any. Okay. Let's go. So estimable. Which one? Well, hopefully you realise this is a good thing. You want to be able to estimate how long things take. And this is a pro of small work packages. Okay. The fact that the team knows best. Now. This is a slightly different phrasing to the ones, but. Many developers will argue that the team knows best. The manager deciding the work breakdown stretcher know anything about what they're talking about and the team should make the decisions. So is this a good thing or a bad thing? And is it related to small or large work packages? I guess this one's a bit ambiguous too, but hopefully. You will figure out where it belongs. Okay, I'll stop the poll now. So. The answer is a good thing to do with large work packages. The fact that the team knows best is a good thing. They know how to manage their own work, so you should give them a large work package so that they can make the decisions as to how to complete the work, rather than telling them these are the units of work you're going to do. Just give them the whole package and say, go away and do it, okay. The ease of controlling the team. Oh, sorry. We've got a question. Yes.

SPEAKER 2
I don't think that these kind of questions would come up in the exam. I think that you they do, and it's a bit of ambiguity about where they might be placed. Is it all right, like I guess, is our justification enough?

SPEAKER 1
Yes. If your justification is correct, then yes, absolutely. This kind of question is the kind of thing that does come up in the exam. But it's not about the right answer. It's about your critical discussion of the reasons behind that decision. That's often more important. And actually, you should probably present both sides of an argument in an exam question to get full marks. Yep. Because the team doesn't know best.

SPEAKER 0
They will have.

SPEAKER 1
Yeah, I think that innovation should be done by. I personally think but you know, you could argue otherwise, but I personally think that the innovation should be done by the team rather than by a manager. I don't think I don't think the people managing should be making the creative decisions in software projects. I think in bridge building projects, maybe they should. We don't want creative bridges being built halfway through construction, but with software, I think you need to let the developers do what they do best. Yep.

SPEAKER 0
Right.

SPEAKER 1
It's a good thing that the team knows better, because the manager is delegating responsibility to that team to deliver for them. So you need to allow that team to thrive. And by giving them a large work package, you're doing so. That makes sense. I mean, you can there are different types of managers. There are different flavours. I personally think software developers for software projects, it's important to give software developers the opportunity to think creatively, have their voice heard and have that information, you know, improve the project rather than one person filling in a checklist that project manager making those decisions for them. Now, in some situations, the project manager does need to to step in and perhaps where this next one comes in, the easiness to control the team. Perhaps is the counterargument that you're getting at. Perhaps. So, yeah. Can everyone get their answers in for this? This one? Okay, I'll stop the poll there. So. There are kind of two sides to it, right? The easiness of controlling the team comes from a smaller work package. If you've got some more work packages, you're not having to. If you do need to control the team and say, no, I don't want to do it that way. It's much easier if you were in control of the work package size, because you can say, this is the defined brief. You have to do it this way because we have other work packages depending on it. Yes. Yeah, that's a good question. Management is not the same as control. And I think that's where some of these questions have come from. So what I'm trying to explain to you is that management is, you know, control is about specifying how you want things to be done. It's about enforcing a certain way of doing things. And that's one way of managing. But it's not the only way. In fact, I think a more effective way of managing software projects is to allow the team to. Control their own decisions. The team should choose what they do. The manager is trying to facilitate and support the team to get the most effective outcome, rather than controlling the team and telling them how to do their job. They enable the team to do their job as effectively as possible. Those are two different flavours of management, and it depends on who you are and what kind of team you're in, and what environment you're in, which which of the types you would choose. We'll come back to this a lot further down the line actually in this lecture course. Okay. So the project manager having less control, not the prime minister but the project manager having less control. Is this a pro or con? Again could be argued either depending on your your thoughts. But which of these does it fit into. I guess this is kind of duplicating what we've already discussed here. But on the flip side. So I'll stop the poll there. Of course, with large work packages, the project manager has less control. They have deliberately given control to the teams. That's why they did it. And by process of elimination, hopefully you'll figure out the last one because there's only one space on the grid duplication of work between work packages. And this is the big reason and the important one to realise. Why we don't want small work packages. So I just took the pole that hopefully the fastest fingers got in there. If you have lots of small work packages, quite often there's duplication of work. Somebody might think, oh, you know what? I really need a helper function to do this for me. So they'll write it. And another team might have exactly the same idea. There's no sharing of resources between work packages because you've minimised those interactions. You've created barriers between work packages for control, but you've lost the fluidity of knowledge which may be beneficial to the project in a different way. Question. Yes it could. Yeah I completely. It could be considered the PM may not want control. So yeah I completely agree. That could also be on the other side. Absolutely. Okay. So good. Let's look at the leaderboard and see if Mr. Smart is still up there. Oh fourth place still same place as before but some very high scores here. Well done to everyone who's up there on the leaderboard. So some very good scores today. Even Boris Johnson's up there which is which is surprising okay. Okay, so these are the things I defined earlier. I'm not sure why I'm defining them. Again. Maybe I'm going to talk about them in a second. I'm. So. Let's talk about this specific thing that the guide mentioned that these. These work breakdown structures need to be deliverable oriented. So here's a work breakdown structure. Let's take a look. It's been broken down into research concept implementation testing go live adaptation. And then under here. All these different actions that need to be done. Is this a good work? Breakdown structure. You shout it out. I like it. Then I think it's rubbish. Yep. Oh, very good, very good. Anyone else? I think that's a pretty good answer. That's one hard to beat. So these are the things that I've got here. So these aren't deliverables. So you'll remember the definition of a work a good work breakdown structure is a deliverable oriented hierarchical decomposition of the work that needs to be done, blah blah blah. These aren't deliverables. These are phases of the project. And that's bad because they're not parallelizable. Right. And these are activities. These aren't deliverables either. And that's bad because they're perhaps not estimable or that maybe they are not easy for someone to deliver. Okay. So yeah, there you go. There's your answer. As you said, not easily parallelised. And this is actually just this is just waterfall, right. And we all know that waterfalls are rubbish methodology for managing anything. So yeah, this is a bad work. But. Um, let's clarify what a deliverable is as opposed to an objective which we talked about already, these objectives, these things that we talked about in the seminars and the things we talked about last week. These are the the outcomes that are beneficial. These are the improvements that we're trying to make. These are the reason for doing the project. We use Smart to define our objectives. We want them to be things that we can do to improve something by some amount, by some date. Right. That was that's what objectives are. The goals of the project. Deliverables on the other hand, are outputs or products. They are things that we're going to build. They are tangible things that can be defined very cleanly if someone's made it. Usually a deliverable is something we can say, yes, they've made it. There it is. I can see it. The deliverable is the thing that you made. The what? In order to achieve the objectives, the objectives may be much, much harder, much vaguer, like increasing customer satisfaction by 20%. You're not going to find out if you've you've achieved that objective until perhaps long after the project has been implemented and put into the real world. So the objectives are often much more nebulous and much harder to to measure. That's why we use smart to try and control our objectives and help us achieve them better. But deliverables are a very well defined unit of scope, and we much prefer deliverables when we're talking about scope. So the objectives, they relate to the purpose, why are we going to build it? The deliverables will relate to the work we're going to do, what we're going to build, and they are estimable. That means we can estimate how much they're going to cost, how long they're going to take. They're going to be parallelizable and they can be even purchased. Right. These are things that are defined that we can perhaps say, this is what I want. Can I buy it? Yes, you can. You can buy it off the shelf. Or can I get a supplier to produce it for me? These are you can't buy customer satisfaction off the shelf, but you can buy a piece of software to manage customer service. Right. These are the that's the difference right. So hopefully that definition is clear to you. So it's important distinction to make. They're both important though. We're not just going to disregard the objectives when we're defining scope. We need to make sure that they're aligned right. So we must align our outputs with the customer's objectives. You should also exclude any deliverables that aren't helping to achieve the project objectives. This is how you avoid scope creep. If you've got 25 features that you want to build in your project, if you go down that list and they're not strictly aligned to the goals of the project, you should eliminate them or down weight them as maybe just could have objectives. They are not the primary case for doing your project. Okay. So let's have a look at another way. Another work breakdown structure. I think this is one of NASA's ones found off the web page. So yeah, they're going to go to the moon and they've broken it down into different parts. The budget is split according to the work packages. And although this is drawn in a kind of a with these things going down, these are actually these are the work packages here. Okay. So these are kind of the component level work packages. And these are the individual work packages. So these are all work packages. So is this a good work breakdown structure. Yep. Yeah, okay. But if you were managing this project, could you be more specific as a manager? Yeah. You were a rocket expert. Yeah. Good work. Good answer. Good answer. Yeah, I think that's a fair point. Yeah, you could certainly break these these things down more specifically. So anybody else want to comment on this work breakdown structure. No. Okay, so we've got the one answer. It's a good one. So according to the PMBoK guide, this would be a good work breakdown structure because it's full of deliverables. So every single thing on here is something you can very clearly give to somebody and say this is your project. I agree, some of these projects are perhaps a bit big, but somebody could have the spacesuits work package and they would probably know what they have to build. At the end of it, you'll you'll know if they've made the 70 spacesuits that you asked for. So it's got very clear scope. It's very clear what is being made. Now, you probably would add more detail. So you wouldn't just the project manager wouldn't just produce this and that's it. They would probably also produce a document for each of these work packages, detailing exactly what needs to be built, or even saying that the team can choose what kind of rocket to build as long as it meets a certain specification. So the work breakdown structure isn't specifying how each of these things, these things is done necessarily. It's just defining the units of scope. So yeah, that that would be a reasonable work package. You can't really build half a rocket. But perhaps there could be within the rocket program of this project. Maybe there is somebody who works on rocket fins, and somebody else works on rocket boosters and different components at that level. So that would probably be how that would be managed within that team. It's aligned to the objectives in the sense that the purpose is very clear. Gathering materials launch recruiting team. These components aren't parallelizable like last time. So maybe that's not still not strictly a deliverable oriented work breakdown structure according to the book guide. But I think it's quite good because it's sort of focussed on the objectives. Each of these work packages is well defined in the sense that it's an ambiguous, it's understandable. You can estimate how much it's going to cost and how long it's going to take. They're parallelizable. You can do each of these things completely independently of the others or even purchase this, these parts. Okay, so these are all good things of work packages, although they could be broken down further. I think that's a fair point. These things are well defined in their own right. And if you were to break them down further, hopefully those parts could also be very well defined in their own right to. Okay, so this is what PMBoK tells us. The work breakdown structure should be deliverable oriented, not objective oriented or process oriented. Deliverables being products, objectives, being goals and processes being the actions and activities that you're going to do. Um. So if I look at the one that I showed you earlier, what is the deliverable in this case? So. The project is teaching this course. Teaching this module. The objective is to increase students understanding of lecture material. Is that a smart objective? No. Probably not. Let's break it down. To increase students understanding of some very boring lecture material, I think that's a more, more specific way of defining project management for computer scientists. So let's improve the objective. Okay, so now that we've got that clear objective we think okay what are we going to build. So there's a problem. Students can't pay attention for two for two hours. Yet every year they give us these two hour lecture slots. Solution. Well, one solution, according to the pedagogical literature, which I've studied in detail, is that students engage more when there's active learning. So if I ask you questions, rather than telling you stuff, apparently you take it in better. That may not be the only solution. That may be other solutions out there. That's the one that I have gone for. The project management textbook can't help you with coming up with the solutions to these problems. The project manager maybe is rubbish at solving these problems. That's the creative bit. That's the bit that requires a spark of ingenuity and perhaps consultation with the team and figuring out how to solve those problems. Being good at problem solving is very important, I think, in project management. But, you know, creativity is something that's very hard to measure, I think. But anyway, what's the deliverable? Interactive content. That's how I've solved the problem by having quizzes and things like that within the lectures. So when I redefine this, what I'm going to create is not just some slides, but slides with interactive content. That's the deliverable in order to achieve my objectives now. No. Nowhere on here are those objectives clear. But I've had to make sure that I factored in the objective, factored the objectives into the design of my work package in order to achieve my objectives. So I've thrown away all that information about my objectives. And all I've given you is this work breakdown structure. So you have to really hope that if I now hand this to another lecturer and say, look, this is how we do lectures, here's the plan. Hopefully there's enough information in there that they can they can reproduce the. The blueprint of a good lecture lecture module because otherwise this is not a good work breakdown structure. So do you agree? Having thrown away all that information about objectives, that a work breakdown structure should be deliverable oriented and not objective oriented or process oriented? What do you think? This is. There's no right or wrong answer here. This is just. I'm keen on your opinion. Now, if you were in a business school lecture, they probably would be a right or wrong answer here. But this is a different kind of module. I want you to think critically about what we're being taught by the project management textbooks. Okay. So just take a guess if you're not sure. As I said, this is this isn't it's not going to affect the leaderboard. There isn't a right or wrong answer here. Okay, stop the poll there. Okay, so you you all agree with the PMBoK guide. You must have read it cover to cover and you know it better than me. So anyone who agrees, then you want to explain why you think it should be deliverable oriented. Yep. Um. Yeah. No, you're absolutely right. And the ability to reason about these tangible things is the reason why this is considered more effective for managing teams. If you give them something tangible to create, they can come back and deliver that more easily. So yeah, that is a potential argument. So let's look at this typical third year project and to think about how to make this deliverable oriented. Because I think it's actually quite hard. I personally find it very difficult to come up with the deliverables. I think if you're thinking in terms of solving problems, you're not often thinking in terms of deliverables. It's good to. It's good to be clear. So let's have a look at this. One project is recognising emotions from faces. The objective is kind of loose. Discover the magical algorithm to solve that problem. So the deliverable is then obviously a magical algorithm right. But that's a bit too vague. It's not something that they can estimate. They get really stuck in their project spec. They don't know how long it's going to take. They're just going to say, oh, I'm just going to take an agile approach to my project. And I just I'll figure it out as I go along. And that's such a common thing that students do for their project specs, because they haven't yet got the knowledge they think they need to be able to to solve the problem, to define clearly what they want to achieve. And this is an important reason for having deliverables that you can define what you're going to do if you haven't reduced it to something deliverable, if it's still too vague and undefined, you can't estimate how long it's going to take. You can't work out what resources are needed. You can't plan effectively and manage and control the project. Okay. So you need to refine your objective. If ever you get in a situation, you need to refine that objective into something more specific and you have to do some work. You have to do some research. So this person has decided they're going to go for a magical machine learning solution. But that might be still a bit vague, but it's certainly a better place to start. However, then there's a new problem, right? Machine learning course isn't until next term. They need to do some research. Read papers. That's how they're going to solve that problem. So that research they can't do yet. They haven't done it yet. There isn't time. They're still in the planning phase, so they need to have as their deliverable a list of candidate algorithms and their suitability. Um. So the answer to the research question is the deliverable. Okay. So now that they've got that, they've, they've decided that they're going to find and research for algorithms. They have a new problem. These algorithms, as they've done a bit of research, take a lot of time, a lot of training data. So now they need to break it down into more things. They've got the list of candidates. They also need some training data. They need working implementation of some algorithm, whatever it happens to be. They might need to do more research. You keep on going right until you've got what you need. So the key thing is when you start breaking it down enough, it starts to become, oh, I can do that in a few days, I can. I can Google it in a few hours, I can. I can get I can get a working implementation in a few days or in a week or something like that. You start to be able to estimate how long it's going to take, and you keep on breaking it down until you know how you're going to do the work. That involves research that involves back and forth, that involves iteration. And hopefully with your third year product specs, you did enough of that to have a convincing plan. And you didn't just say, I'm going to spend the first term doing various bits of research to figure out what my project's even about. Hopefully you are a bit more specific than that, and we're able to narrow it down to specific things. So you can't write, you can't do a project plan until you've done some of that research. Or if you do, you need to have a good methodology for making sure that you can act on that information and use that information for the next step. Okay. So look at some pros and cons of these deliverable oriented work breakdown structures deliverables. They're easier to estimate. They make us focus on the essential things that we're creating and nothing too vague. If you're trying to make student satisfaction, you might go a bit off piste. You might go beyond the bounds of the scope defined. But if someone says, make me some, you know, customer interaction software, that might be different. It fixes the what of the project? But what it doesn't specify is how you're going to do it. It says you're going to build a rocket, but it doesn't say build a particular type of rocket that is going to work in this exact way. And you have to do all of these steps. So it's still leaving the process, the creative process of solving that problem fluid. It still allows the team to develop in their own way. So by not being process oriented, explaining how they're going to do it, you leave some creativity at the discretion of the team. But by making it very specifically deliverable oriented, you are still telling them exactly what you want. You're defining the scope very cleanly and clearly, and that's how we manage scope by striking that balance, making sure that our deliverables correctly encapsulate our objectives and define the bounds of what we want to achieve that without overly constraining the team in delivering it. Okay, I'll let that sink in for a second, because that's the same as we talked about with work packages as well. The distinction between small and large. It's exactly the same here. And that's how we manage scope by getting that balance right. The cons, of course, the difficulties, the challenges of this deliverable oriented approach is that we might lose sight of the objectives. Very easy to lose sight of the objectives unless our WBS really does encapsulate them. Really important to check it does. It can restrict further scope changes and take some creativity from the developers, because it doesn't allow them to solve the problem in a different way. Maybe we didn't need a rocket. Maybe it would have been satisfactory to just fire a bomb or something instead. I don't know what the particular project is. There may be other solutions. Maybe the project manager did not see all possibilities it may overlook. So when we talk about estimation and estimate ability, when you're using deliverable orientation, you don't think or can't always think about the processes involved. And therefore it makes it harder to estimate how much time and how many resources are needed. So deliverable oriented actually might be if it was strictly deliverable oriented and ignored the processes, the how, it might be actually much harder to estimate. Whereas if you do specify everything in painstaking detail, it might be very easy to control how long it's going to take. But you take there's a cost there, and the cost is the lack of creativity on the part of the team. And I think deliverable orientation doesn't always come naturally when you're thinking as a manager about goals and how you're going to achieve them, you either think about all the details or you don't think about the details at all. But you know, specifically narrowing it down to the deliverable is sometimes difficult. It doesn't always come naturally. Breaking things down into the lifecycle phases might be more intuitive, so perhaps you can think about those different things and decide where you sit and whether you like deliverable or other orientations to your work breakdown structure. I'm going to skip this slide, but this is something you can read in your own time. Thinking about how you might go about constructing a work breakdown structure if you want to stay focussed on objectives and goals, but I'm not going to talk about that now. Oh, this sounds interesting. Please complete the initial module feedback survey. Didn't remember that was in there. So what we'll do now is we'll take a five minute break. We'll take a we'll take an. Yeah, we'll take a five minute break. And please also spend a minute completing the initial module feedback survey. During that time if you can. So we will resume that quarter past if that's okay with everyone else. So the survey should be available via via Vox. Thank you. Is it there? Did you find it? Is it not there?

SPEAKER 0
Seven.

SPEAKER 1
Okay, good. The survey is now live. Apologies to those of you who tried already. It should now be visible on Vox.

SPEAKER 3
Hello. I just thought you said, quote, not one of those initiating process outputs. Right? Was in business case like what initiation process is all about.

SPEAKER 1
So the business case is an input. So the business case is something that in the world PMI world is an input. So the business case is already decided before you even start the project. You wouldn't even get to that point of initiation until you've got a business case for 49.

SPEAKER 3
Yes. Is that listing outputs.

SPEAKER 1
So those are all called processes. And each of those processes has its own inputs and outputs. So if you have a look at the book online it's worth just having a look at it how it's structured. So basically the book is structured into a chapter for each of the different process groups. So you know, initiating, planning, executing, monitoring and closing. And then it's split into knowledge areas. Within each chapter you've got those 12 different areas. And then within each of those there are each of the different processes. And think of those processes like as a method or methodology for doing that.

SPEAKER 3
And they all have.

SPEAKER 1
Each of those inputs and outputs.

SPEAKER 3
So is it like let's say this initiating part phase and then planning phase. Yeah. So with the initiating phase output being the input for the.

SPEAKER 1
Often they are. Yes. Often they are. Yeah. If you've completed the initiation then you should have all the inputs necessary. Once all those outputs should be enough to do the planning for that particular section. Yeah. I mean sometimes the output of for example, the output of scope planning is feeds into the time planning because you need to have decided your scope before you can estimate how long it's going to take, for example. Cool.

SPEAKER 4
I. Don't know.

SPEAKER 0
Yeah.

SPEAKER 4
Well. Yes. I get.

SPEAKER 1
Okay, so we'll resume if everyone's happy to do so. So we've got a few questions came in. I've had a quick look at the poll results. I'll study them later. But it looks like no imminent issues. Which is good. Are you expected to do any work on the group project outside of seminars? At the moment there's no specific homework, but as you start writing the chapters of your essays, you may decide to do more work in your teams if you want to. I think most teams don't until it's time for the presentation at the end, and that's when teams tend to meet, meet up with their team outside of the seminars and plan their presentation. There is no dedicated time for helping you plan your presentations at the end. So that's the bit that you're going to do outside of seminars independently with your team. However, when you're writing your essays, you may be exchanging diagrams and figures that you've done in the seminars as part of your essay. So there'll be communication, I expect. And some people do decide to go a bit beyond what they've done in the seminars to improve upon it so that their essay is better. That's something you also might do, but I would suggest doing that perhaps independently of your team. And that way you're going to get credit for it. And you can talk about what your team has done and what you've done that's improved upon that. That's probably a better way to get credit for that extra work. Okay. I'm a request from people at home. Apologies. I should I should speak out loud so that people at home can hear the questions being asked, or maybe the people asking the questions. Can you shout them out really loudly for the benefit of those at home? Or there are microphones here, I don't know. But yeah, I'll try to repeat the question if that helps. Is the group presentation strictly spoken, or do we use PowerPoint to accompany the speaking? Yes, most people tend to use slides. It's a five minute presentation. We'll talk more about that nearer the time. But it's a yeah, people tend to use slides to support their their narrative. Are we going to do peer review for the essay among our team members? No. You do peer review independently, so each person will be allocated five different essays to all the members of their team. You won't be reviewing a project that's the same project that you're doing. You won't be peer reviewing people on your team. You'll be reviewing random essays from people doing different projects in different classes to you. Um, can I give an example of what would go into the communication knowledge area? Not specifically. I suggest you do. There is that you should look in the PMBoK guide. It's an E resource for this module. Have a quick look. If you're not immediately clear what goes into that knowledge area, it's worth having a look to see what kinds of things fall into that knowledge area. Let's give me an idea for a good exam question. So thank you for that prompt. I don't know what that means. Sorry. Um. So would I say that team design is done in the proceeding process group? As in deciding who works on what. So yes, you will decide who is going to be in the team before you assemble the team. Otherwise it might get a bit confusing. So yeah, in the planning phase, that's when you'll decide who's going to do what. You'll probably get permission from team leaders and managers to get those people onto your project team. And then in the executing stage, that's when you'll bring them together. How to balance planning with executing. Are there rules of thumb as to what proportion to spend on each? You shouldn't spend too much time planning. I think I shouldn't say that to students because students tend to spend too little time planning, but I think it would be foolish to waste too much time planning. There are two types of student that I deal with when I'm supervising third year projects. Some of those students are really excellent at planning. They do brilliant project management. They have great Gantt charts and really detailed project specifications. But they can spend the whole first term doing too much research, and they often fall into the trap of thinking, I don't know enough, I'm going to keep researching. Whereas actually, I think the other kind of student who dives in headfirst doesn't do any planning up front, often learns more by making those mistakes and in the end, kind of balance each other out. I think there's some middle ground. I can't say exactly how much time, but, well, why don't I say 20%? It depends on the project. You know, you want to you want to minimise your time spent planning and maximise your time spent producing something valuable. However, the more time you spend planning, perhaps the more chance of the thing you produce being valuable. What I would say is stop planning when you feel confident that you're able to deliver something of value. You don't need to keep planning until you've answered every single question and or explained every unknown. But once you've removed enough uncertainty to be uncertainty to be confident, that's when you stop planning. Sounds good. Thanks for the clarification. Makes sense now. Okay, two hour lectures are too long. Can we split it into one hour lectures? What you can do is just sort of have a little mini nap in between during the five minute break. I'm afraid I can't change the lecture schedule. But there is one of the few of the groups are doing lecture allocation as their case study, so maybe they'll solve it for us. Can you change the topic of the presentation? You have been allocated a case study that is the topic of the presentation. You can't change that. Can we get a comparison of the two work package breakdown examples, where one is a project and the other is rocket building? So I don't understand the question. To somebody who. Yeah.

SPEAKER 0
Uh, it's. Uh, yeah.

SPEAKER 1
So if you've got. So the question is if you've got a work pack, a work breakdown structure which is relating to activities, how do you turn that into a deliverable oriented one? Yeah. So there was a slide that I mentioned earlier which which I sort of skipped over perhaps go back and review the, the, the recording or the slides that are on Moodle and have a look at that. And if still unsure, we can talk again if that, if that helps. It's a creative process in the seminar on Thursday. You're going to get the chance of working with work breakdown structures and have a go at that. So I think it should all become clear after that. I think when the team efficiency point only applied to experienced teams, a more experienced team might not know where to start. Yes, certainly there are different ways of interpreting those different, different things. Thanks for the warmth. Appreciate it. So let's go back to the slides. There we are. Okay, good. So we haven't got a lot of time to get through the fun stuff unfortunately because I spent too much time dealing with that. But never mind bad time management on my part. Maybe that was on purpose to teach you a lesson. So time management, how do we do it? Well, we now know what we're going to make. We've done the scope planning. So that means we know exactly what the units of of scope are. So we can now start estimating them. So let's look at the PMBoK guide. And we are in this part now. And you'll see it follows a very the processes within this within this block within this knowledge area intersected with process group. Those five processes are very similar to the ones from scope planning. We start with planning schedule management. We previously had planned scope management. And this is kind of the meta planning where we figure out how we're going to plan the planning. Right. So how will we do how will we do schedule management. How will we execute and control the plan? What would we do? So that's what you sort of plan how you're going to do it. So that's that's kind of the meta bit. That's perhaps not so not so exciting. Let's assume we're going to follow this process. So we'll first define the activities. So remember we've already got the scope. That's the deliverable. We now need to define what actions are going to produce those deliverables. This is where we'll break it down into the into the how we're going to do it. And this may require some consultation with the team to figure out how long it's going to take. So that's not easy. It's not easy for a project manager who knows nothing about software development to figure out what actions are needed. So they'll need to, on a high level, figure that out. So you define the activities, the things that are going to take time. Then you sequence those activities. You figure out what the relationships are between them, work out the dependencies. This is kind of hopefully you're visualising a Gantt chart in your head, little arrows connecting these little boxes. You know, there is a sequence of things you have to do to produce this deliverable. And when you've got that, when you've got these activities, you can estimate the durations, figure out how long they're going to take and figure out the schedule. The schedule is just a way of balancing all of the different dependencies to create a timeline of things that take time. You know, that's a Gantt chart, right? So what this is really just telling us is how to make a Gantt chart, right? Which should hopefully be pretty simple. So there's nothing again, no rocket science here. This is all straightforward. However when you look into the how do we estimate activity durations in the PMBoK guide? There are lots and lots of very useful ways to do this. And it's you know, it's not a simple thing to do. So what have we got? Well, there's the analogous method. This is where you look at how long it took last time to do the activity. And we perhaps adjust it to this project to decide how long it's going to take this time. Last time we did this project or a similar project, it took us three weeks to do the research, so we'll assume it will take three weeks this time. Or you can use a parametric approach. What you do is you just parameterise a previous project. So we built a house. It took us one week. Now we want to build a hotel. It's got twice as many floors as the house had. So we're going to assume it takes twice as long. You parameterised the previous project. You can also improve the quality of your estimation by asking other people. Any one person is going to be affected by their own biases. But if you actually ask a group of people, if you crowdsource, you get much more reliability. On the whole, human beings are reasonably accurate, but any individual could be more or less accurate, so the variability can be reduced by using some kind of team based estimation, especially if the team actually know what they're talking about. You know much better than asking somebody doesn't have a clue. So ask someone who knows. Ask a team of people who know you're going to get much more reliable numbers. Another method is using the three point estimation. So you don't just estimate how long it's going to take, but you estimate a min and max as well. And what has been shown is that when you're uncertain, you're usually quite good at recognising that you're uncertain, you're able to choose big bounds. So you might say, I think a week, but it might take up to ten. You know, that uncertainty has been reflected in the fact that you've chosen a big max, and then what you can do is you can even use a probability distribution if you want. So you have the min, the max and the mean. And you could use a triangle distribution, which is this dashed line here. Or even a beta distribution doesn't really matter which you're picking. You pick the one which is going to be easier, make the math easier, because it's just a very crude guess, right? You know, there's no point using an accurate model here when you're just trying to calculate something quite, quite rough. But this allows us to quantify uncertainty. And having that measure of uncertainty helps us know how accurate our estimate is. We're going to come back at the very end and talk about Pert, which is a way of incorporating uncertainty into into a Gantt chart, into a critical path method. Okay. So the next thing we need to do in the guide was to sequence the activities, put them in some kind of order, work out what the relationships are, dependencies are any constraints that something has to be done before or after something else, or resources need to be created feeding into another what the milestones are so. Just you just basically there are different ways of express of of connecting things. So these two activities here we use a start to start. These two have to start at the same time. So we indicate that with an arrow like this these two here are kind of dependent. So when this one's finished this one can't start until this one's finished. These ones have to finish at the same time. And this one has to start I don't know what that means. What does that mean? This one has to finish after this one started. Yeah I don't know. You probably won't use that bottom one. I don't really get it. If you can understand that, great, I can't. So this is what a Gantt chart looks like. It's a graphical visualisation of the project. It shows the sequence of activities. As you can see in week one. This is the activity in week two. These ones here directly follow. And perhaps they can be done in parallel because there is no dependence there. And then so on. You know you all know what a Gantt chart is. You've all produced one already. You can show those dependencies with arrows, as I just explained, and you can even use these Gantt chart to record progress. So if you're using a sophisticated tool, unlike the the Excel spreadsheet I gave you, you can actually input the current date often with a little dash line like this and the progress on each of the activities. And you can kind of see this one's ahead of schedule. This one's behind schedule, a really useful way of tracking your progress as time goes on. A lot of agile software, JIRA and things like that allows you to do this automatically. When you tick off a task, it will update these graphs automatically, and you can see how well you're doing as a team. Lots of Gantt Gantt chart tools out there. Elegant. I don't know, the slide seems to have gone a bit. A bit strange. I don't know why. I think who knows? You will be able to Google and find your own tools. I've made this slide quite a long time ago, so maybe it's out of date now. I think asana was quite good Trello, but I think, you know, you can use you can use LaTeX in the PDF package to make things as well. So there are many, many tools out there. Pick one that works for you that you can constantly update and get what you need from it. So that stuff's pretty obvious. Now there's a more mathematical way of of dealing with time management. And the first thing we need to do is produce a graph called a project network diagram. So this is a graphical visualisation of the dependencies between things. When you do that you can view something called a critical path, which is the sequence of activities which are causing the project to take as long as it is. So let's say, for example, that we have a table that looks like this. It tells us what the tasks are we have for ABC and D, and some of them depend on others. So in this example A and B depend on C they have to come after c and b depends on d. So how do you represent that graphically. Well there are different ways to do this. One way is to use the activity on node method. So the very first activity in this case could be A or B. There's no it's not obvious which one you would start with because they both can start at the beginning. They are not dependent on anything. So if you were to draw this like this you would have A and B both happening in parallel. They can both happen in parallel. They don't have to but they could. So that's the earliest we can schedule them. And then see, because it depends on A and B, you would use two arrows there indicating their dependence. Hopefully that's relatively intuitive and D depends just on B and the project ends when everything is complete. So you connect C and D there. You could connect A and B there. But there's no need because that arrow is encoded through the D. So you don't need to include redundant arrows in this. So that that's called an activity on node. And. I think that's quite intuitive. There's nothing too complicated about creating those. It's something you'll have to learn to do quite quickly in an exam setting with probably more complex dependency tables. There's another way of doing this. And instead of putting the activity on the nodes of the diagram and indicating dependencies with arrows, you have activities on the arrows themselves. For example, A and B would be two independent activities. And these activities kind of are kind of travelling in different directions along these arrows. And you just sort of have a dot. A dot is like just a, a meaningless thing. It's just that's the end of the arrow basically. So C depends on A and b. So how do we draw that as arrows? Can anyone think how we do that? I think I got a question mark. Sorry. I'll do d first. D that's quite obvious. D depends on B, so we just connect it to be like that. And then in fact we can connect to the end because nothing else depends on it. So this is one possibility for how we could express C. Can anyone think of a better way of doing it. So C depends on a and b. So I've kind of done two arrows representing C. But we should really only have one arrow. Does anyone want to suggest a method for doing that.

SPEAKER 0
Yeah.

SPEAKER 1
Which nodes would you combine? The two. So just join those together. Yeah, the problem then would then be depending on a if you move that up to there, then D would be depending on A as well. So we'd lose that that important dependency. So does anyone else got an idea of how we can. Put si just on one arrow rather than having it split. Yep. She's a new note. Whereabouts? In in between there. Yeah. Yeah. So what would these arrows represent? The an arrow connecting this node to this node that you've created. What would that arrow there. That represent in terms of the the project. No. Then just like it would just represent an activity that took no time at all. So this is what you're describing instead of having an additional node? I've just used that one. But yeah, having this basically a dummy activity that does nothing at all is how you create an activity, an arrow pad like this. This is something that I think is potentially much trickier to do in an exam, but hopefully you can figure it out. There's there are probably algorithms to do this. I'm not going to teach you the algorithms for teaching for doing activity in arrow. I find this notation a bit horrific, and most algorithms for working with things tend to work with the activity on node method anyway. There you go. All of the there's your there's your example with the extra the extra node there. So. Oh, yeah. So that's how you make a project network diagram. It's something you'll need to practice by doing a few of these yourself. I can't really teach you that in a lecture, but what I can teach you is how to do critical path method. So critical path method is a way of using that that project network diagram to solve a problem of calculating the critical path. So let's talk about first of all what that is. So the critical path in any project is the sequence of activities. Um, that cannot be delayed without extending the project duration. So it's those activities that are critical in the sense that if you were to delay one of them, it would delay the project. So there is always a critical path, and that might be something you may be able to prove. Once we've talked a little bit more about the maths of how this works. But there is always a critical path through a project. There was always a task that is going to be the one that is critical because, well, perhaps I'll talk a bit more and then we'll come back to this. So. First of all, some definitions, some variables that we're going to be using in solving the critical path method algorithm. So the duration of an activity we need to know how long each activity is. So we'll call it D. And we're going to compute some intermediate values for each of the different nodes in our pad. We're doing activity on node P and remember. So we're going to calculate the earliest start time. This is the earliest time that activity is able to start. So if the activity has no dependencies that's going to be zero. We can start right at the beginning the earliest finish for an activity. So that's obviously going to be the earliest start time plus its duration. And we're going to calculate the latest finish time for that activity. And we're going to calculate the latest start time. Now calculating the latest start and finish. We can't do until we've calculated all the earliest starts and finishes. Then we know how long the whole project is going to take. We work backwards to calculate the latest start and finish times. So the latest finish is the latest time the activity can finish without delaying the project. And the latest start is obviously the latest finish minus the duration. So when we talk to the algorithm, those calculations should start to make intuitive sense to you. And there's something we can calculate. In addition to all of this is something called the total float. This is kind of the slack time in the project. And this is the amount of time a task can be delayed without delaying the project. So what is the slack for a task on the critical path? Does anyone want to volunteer an answer to that? Yep. Zero. Exactly. We already said that the critical path is the tasks which cannot be delayed without delaying the project. So the slack is zero on the critical path. And that's the whole point of this algorithm. That's why we do this algorithm to calculate those tasks with zero slack. So you can calculate the total float by cutting the difference between the latest and earliest times, the latest start and early start, or the latest finishing earliest finish if they are exactly the same. The project that particular activity can't move.

SPEAKER 0
Okay.

SPEAKER 1
So algorithms are relatively simple. You construct the pad, as we already talked about on the forward pass. You calculate the earliest start times. I already said that the earliest start time of the task with no dependencies was zero, but if the task has dependencies, it can't start until the predecessors have finished. And then once you've calculated the earliest starts, you can calculate the earliest finishes for those activities, and you propagate that information through the network until you've calculated the project completion on the backward pass, you now know the latest finish time of the last activities, because that is the project completion time. So you just work backwards and calculate the other way. So we'll do that as like with a bit of an example. So this is an example from my days as a student. I think these days students have more sophisticated repertoire, probably involving quinoa and things. This is the kind of thing I used to eat on a daily basis, probably without the cheese. It was too expensive. Just plain pasta and water. How disgusting. Oh, vegetables? No, we didn't have vegetables anyway, so. Hopefully you would be able to do that. I'll leave that as an exercise for homework. You should be able to come up with the nhd for this, this network here, for this, for this dependency table. For example, you can see that boil water and chop veg and grate cheese. They have no dependencies, hence they are all connected to the start node. Fry veg depends on chop veg. You don't want to, you don't fry a whole pepper just doesn't work. So as you can see fry veg depends on a chop veg. It's all pretty intuitive. Hopefully you'll be able to do that. So this diagram should make sense. We're going to have this this parallel path of because you're going to be working in parallel here. When you're doing this meal, that's the most efficient way to be. You're going to be chopping and frying your veg while simultaneously boiling the water in the kettle and cooking the pasta. That seems sensible, and also grating the cheese as well. So yeah.

UNKNOWN
Or do you actually.

SPEAKER 1
Yeah. So yeah. So what you're asking is, does a project manager need to create one of these diagrams ordinarily or. So that usually you'd use software to do this for you. So if you plug these things into one of these sophisticated Gantt chart tools, it will automatically produce a Gantt chart for you and automatically work out the critical path and highlight it in a different colour and do all of this behind the scenes. I think it's important to understand how it works, because then you realise the the faults and the issues and the assumptions that go into this that may be questionable. So on a day to day basis, a project manager probably isn't producing the pad, but I think having an understanding of it, it's an important thing, an important step when you're learning about it. Okay, so you've got your pad. Simple. What we're going to do, we're going to turn each of these nodes. Into something that looks a bit like this. Okay. So we're going to sort of add these little boxes all around the edge to encode the duration. Earliest earliest finish, latest finish and latest start and leave a box in the middle blank there for the total float which will calculate at the end okay. So we use this notation. It's a really nice notation because as we go to the forward pass we're going to propagate the durations this way. And on the backward pass we're going to propagate them this way as you'll soon see. So we're going to augment our diagram like that I've pre-populated it with the durations as you can see which comes straight from this table here. So with me so far. Good. So to start with, we're doing the forward pass. The first thing we're going to do is calculate the earliest start and earliest finish. So the earliest start for chop veggie zero. It has no dependencies. The duration is five. So the earliest finish for that activity is five. So is that an unreasonable estimate? Sorry. You got a question? No. Okay. You put the blender. Maybe, I don't know, fry veg. So fry veg depends on chop veg. The earliest start of fry veggies five. The duration was ten. So the earliest finish is 15, right. This is all relatively simple now. Let's look at a more. Yes. So these ones here are perhaps obvious. Two zeros here that four goes to there, that four goes to there. The four plus the 20 goes to 24. So the forward pass here is all doing obvious things. Now this one it becomes a bit more tricky. What is the earliest start of bake then I want to volunteer and answer there. Yep. But 24. So you can't start baking until all three of these are completed? Absolutely. So you look at the earliest finish for all three and you pick the max, which is what we said in the algorithm. The max earliest float from the predecessors. So that's how we did the forward pass. We've now calculated when the project will finish. It will take 54 minutes to have your pasta. That seems like a long time to make this pasta bake. So now let's work it back. So 54 is the earliest finish time. Uh, sorry. It's the latest finish time now. It was also the earliest finish. It's also the latest finish. We're moving that 54 down to there. So we need to calculate now the earliest finish. How soon can we finish the baking. So we need to just basically subtract the duration to get back to 24. So those observant among you will notice that that bike is on the critical path because it has to start and finish at the same time. There's no slack in that one. There's no free float. There's no total float. Okay. So now how do we propagate that back? So what number should go into these boxes here. Does anyone have volunteer a suggestion there. Yeah. 24. Yeah, there's 24 goes into all of them. Right. That's, that's that's not too complicated one. And then we do the subtraction as before just subtracting the durations. Subtract the duration subtract the durations. And when you keep on doing that what you discover at the end is that chop veg has a has a latest start of nine minutes. So you can chop the veg right at the beginning, or you can wait until nine minutes before you have to start that one. The grating, the cheese. You can wait until 21 minutes into the project before you bother doing that. You don't have to create the cheese right at the start, right? You've got a lot of slack in grating the cheese. 21 minutes of slack. Does that make sense? Pretty intuitive stuff. So you can calculate that slack, right? You can do the difference between earliest start and later start and calculate the slack. And what you'll notice, lo and behold, is that three of those tasks have zero slack. Those are the critical tasks. These are the things that if you're going to try and improve this project, they're the ones you're going to have to improve. There's no point becoming a super master veg chopper. It's not going to make your food cook any faster. Yes. In this method. No, we don't include any contingencies, so we pick a fixed number. Um, you could if you wanted. Instead of using the duration, you could pick the max if you were estimating with a three point system. But actually, we're going to talk about a more sophisticated approach that does factor in contingencies shortly. But very good question. Okay, so we've picked the critical path. There is always a critical path in any project. It's something that I'm not going to explain to you, but it's something that perhaps you should be able to prove in an exam situation. It might be something I would ask you to prove. I wouldn't be expecting a formal proof, like in a maths in a maths module, but I would be expecting some kind of common sense proof. That explains why it's the case. Hopefully you can understand why there's always a critical path. Okay. Yes.

SPEAKER 0
I.

SPEAKER 1
No. In an exam with this, just fill it in. Just write the numbers and then write the answers at the end. You don't need to explain the process. No. If I say apply critical path method to do this, just create the diagram. Tell me the answer. Um, you. When I mark it, I'll mark different aspects of it. So I might ask you to produce a table of what are the earliest start times. What are the latest finish times. So you're showing you're working. So I'd be able to figure out if you got it right or not. Okay. So there's there's a value called drag time. The drag time is. So recall that the critical path these are the tasks that can't be delayed without delaying the whole project. So the critical tasks are those tasks on the critical path. Now we can talk about drag time only for things on the critical path. What we can say is this particular task is dragging the project by a certain amount. It's the amount of time that critical task adds to the project duration. So obviously it can't drag the project more than its own duration. So it's upper bounded by D. But also it doesn't drag the project by more than its parallel tasks might contribute to the project. So, for example, if I was doing a meal that involved 99 minutes of boiling water, I don't know why I do that and 100 minutes of chopping, for example. The chopping is the critical task. It takes longer, but if I reduced it by one minute, it would take just as long. As the boiling water. Therefore, it would only be dragging the project by one minute. Right. So another way of thinking about this is it's the amount of time it would need to be shortened to no longer be a critical task. So there are two different ways of thinking about that. So calculating the drag time is an important thing to do as well. So let's calculate the drag in this example here. I'm concerned we're going to overrun now unfortunately. So the drag time on which one. This one here. The drag time here is 30. That's because this one is of duration 30. It's on the critical path and it has no parallel activities. So that means you could shorten this by up to 30 minutes. If you could find a way using some kind of airfryer or something super fast, you could reduce this time and that would directly improve the project. It would reduce the project duration. So the drag here is 30. There is a potential of gaining 30 minutes if you could speed this up. For these tasks here. This one here. The drag is only nine. Okay. Doesn't drag it by a full 20 minutes. Because if you reduce this by nine minutes then that would reduce the critical. It would it would change the critical path. Let's see how it would do. So yeah there you go. So this parallel task, this parallel path here has a float of nine. So if you reduce this by more than nine then this becomes the critical path. Does that make sense? So you've got to consider the parallel tasks. This stuff makes more sense when you do it in real life. So we do something called crashing. And crashing is the idea that we can speed up the project by reducing certain tasks. Now it's obvious that you want to pick the tasks which have the greatest drag time. Those are the tasks which you can potentially gain the most performance from. You don't want to crash tasks that aren't critical. You don't want to crash tasks that are only have a small amount of gain. So what you tend to do is you start. You can plot a graph like this if you really wanted to, to work out the sort of the trade offs here, you want to pick the task, which reduces the time with the least incremental increase in cost. So you want to reduce the time as much as possible with the minimum cost incurred. This is a graph of cost and time. Now, I haven't got time to describe this in full detail, but study this graph. It makes sense if you start to read through the different points there. But the key point I'm trying to get to you is you pick the low hanging fruit, you tackle the tasks that are the cheapest way of reducing the project duration first. And as time goes on, it's cost you more and more for the same amount of gain until ultimately you decide there's no point crashing the project anymore. This is as good as we can do. So what you can see from this idea is that time and cost are interchangeable. We talked about the iron triangle last week and the week before. Time and cost are things that you can trade off. You can spend more money to reduce the project, and you may choose to do that if you've got strict deadlines, or you may make the project take longer to save money. So in this project, which one are we going to crash? Well, let's assume we can't crash baking. We can't afford an air fryer, but we could crash here by getting some easy cooked pasta. We can take it down from 20 minutes to now, down to 11 minutes. I think you can only buy easy pasta these days, so it's a bit of an outdated example. So two other variables that are worth thinking about are float. So float time. We talked already about slack. This is the concept of total float. The amount of time that an activity can be delayed without delaying the whole project. That without delaying the project finish date. But there's also a concept of free float, and that's the amount of time an activity can be delayed without delaying any subsequent activities. So if you think about some parallel tasks, if you are, if there's something depending on dependent on you, then you have no free float. But if there's nothing dependent on you, then you if the there are multiple activities feeding into a point, then there is some free float. I haven't tried that one at all, I'm afraid. I think there might be an example though.

SPEAKER 5
So.

SPEAKER 1
Over here. We've got an entirely different recipe here where rotisserie cooking chicken sounds great. So this task, these tasks here, they're on the critical path. They have no float of any kind. Right. You can't delay those ones. So we forget about those for now. So let's look at these ones here. So you're going to mix some ingredients preheating oven and then ultimately bake some bread. I'm now baking the bread. You can delay this because you still have to wait for the chicken to roast, so this has got plenty of float free and total float. You can delay this as long as until the project finish date. But over here. This one here has no free float. So this one here takes takes 20 minutes. Um. I don't understand this example. Anyone understand this example? Can anyone explain what I'm talking about? Now I'm going to try to explain this one. Sorry. We're going to you're going to have to study this in your own time to figure out what float time means. I'll come back and explain that next week, I think. I can't remember that example, but the idea is that, as I said, Free Float is about sorry, total float is about delaying the whole project. Free float is about delaying subsequent activities. So in summary we use critical path method to find the critical path. We start with the GND and we find the critical path. We do a forward pass and we do a backward pass. And ultimately calculate the slack or float time. Those critical tasks drag the project and that's what we target when we're crashing. So that's the summary of critical path method. And I'm going to try and in one minute explain to you that I'm not I'm going to do it next week instead. Oh can I do that now. I can't do that. I have to do it now. Apologies. We're going to have to go over one by a few minutes. I think it's worth mentioning how Pert works. Okay. So the idea of Pert is that what we're doing is we're adding a more sceptical estimate rather than just going with the average, the estimate. We're going to go with three point method and saying the minimum and the maximum time we think each task is going to take, because previously when we did our method, we didn't have any contingency as was asked in the question. We didn't have any measure of of reliability to those numbers. So if, for example, a task is going to take a week, it might actually take two weeks. How do we factor that into critical path method. So what we do is we plug in our three point estimate, our A, m and B into either the triangle or the beta distribution. The beta distribution is probably easier because the maths just becomes very simple when you use the beta distribution, even though the beta distribution looks kind of smooth and things like that, it just the formula works nicely. So don't worry about which distribution we use. The formulae shown in this slide would be given to you in an exam, so it's not something you need to memorise. You may need to debate why you would choose which distribution. Which is something that you might think about. Once we've given it a go. So to do Pert, what we do is we start by doing critical path method. So it's relatively straightforward. We do our pad simple no difference to critical path method. And if we were doing CPM, we would just have a duration column. That's all we would need. And we do critical path as normal. But now we're going to have an optimistic and a pessimistic estimate as well. We're adding those extra bits of information for each of the tasks.

SPEAKER 6
Okay.

SPEAKER 1
So then what we do is we just use CPM, we just ignore these for now, and we just use the realistic estimate to work out the critical path. So we're actually ignoring this extra information for the time being. We use CPM and figuring out how a critical path, just like we just already talked about. Okay. So far so good. We haven't done anything new. But now we're going to start using Pert. So what we're going to do is we're going to calculate the mean and the variance using the formulae that will be given to you in the in the exam. So this is the the mean of for this particular task which is alpha plus four and plus b there for plus b is five. Okay. Divide that by six. Right. And you calculate the variance as well. All right. So it's, you know, these these are just formulae calculating the mean and variance of beta distributed variables. We've now got these three numbers. So we have to calculate what these numbers are. Simple as that. It's not. It's not particularly complicated. But what we can now do is add up the means on the critical path. So can you remember A, B, e and f with a critical path five three, three and four. So what we can say is the project will take 15 days just like before, just like we estimated the path method. But we can also calculate the standard deviation because we can add up the variances. So the square of the sigma is the variance. So one squared plus eight of a six squared blah blah blah square root of that for the standard deviation is 2.7. So what we can say is the project will take 15 days plus a -2.7. Right. There's a standard deviation with our estimate. So we're not just now telling you how long the project will take. We'll tell you it with a certain confidence interval.

SPEAKER 6
Okay.

SPEAKER 1
Why do we do that? Because it means we can perhaps assume a normal distribution and say, look, this is the graph of the project completion. It's probably going to take 15 days, but there is a probability it will take 17 days and that's 77%. We do that using basic statistics. The area under the graph. Right. The area under the normal distribution tells us the probability. This is this is a probability distribution function okay. So this is something you should know from statistics. If it's not familiar to you. Recap on your basic statistics. There are websites such as this one here, which is where this graph is generated from. That explains how this is working. Okay, if you're not still not familiar the normal distribution, the probability is the area under it. This is a normal distribution. And I'm not going to talk any more about that. Now. You've got enough information there to to do your seminar on Thursday. But we might come back and talk about this later if anyone's still unclear on it. So apologies that we've we've overrun slightly today. Thanks for tolerating my poor time management. Hopefully that was a useful exercise. Cheers. Me either. Hello. Hello hello. Yeah. Yes. Yes. You also. Yeah. Yes. So sorry. Remind me because I've forgotten what was the reason for. I'll take the microphone off. In fact, I can probably stop the recording as well. Yeah. We don't need everyone to know.

SPEAKER 7
There we go. So we.
